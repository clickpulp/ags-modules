// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#region Definitions

#define BUTTON_PRESSED_LOOPS 8
#define CURSOR_DEFAULT_SPEED 40 // 10 - 70
#define CURSOR_RATE_OF_MOTION_FACTOR (Screen.Width / 160)

Point* _cursorClickTarget;
Point* _prevMousePos;
int _cursorSpeed;
float _rateOfMotion;
int _buttonPressedTimer;
bool _cursorLocked;
bool _walkAxisMoving;
bool _arrowSelectEnabled;
CharacterDirection _lastDebouncedDirection;

#ifdef DEBUG
Overlay *_dbgOverlay;
DynamicSprite *_dbgSprite;
#endif

#endregion // Definitions

#region Private

void _reset_rate_of_motion() {
  _rateOfMotion = IntToFloat(_cursorSpeed) / 10.0;
  if (Input.ControllerConnected && Input.ControllerType == eControllerTypeNintendo) {
    _rateOfMotion *= 0.6;
  }
  _rateOfMotion *= IntToFloat(CURSOR_RATE_OF_MOTION_FACTOR);
  System.Log(eLogDebug, "[Cursor] Reset rate of motion to %f, cursor speed = %d", _rateOfMotion, _cursorSpeed);
}

bool _is_button_pressed(CharacterDirection direction) {
  return _buttonPressedTimer > 0 && _lastDebouncedDirection == direction;
}

void _track_button_press(CharacterDirection direction) {
  if (_buttonPressedTimer > 0 && _lastDebouncedDirection == direction) return;
  _buttonPressedTimer = BUTTON_PRESSED_LOOPS; // TODO: Account for GetGameSpeed()
  _lastDebouncedDirection = direction;
}

void _store_mouse_pos() {
  _prevMousePos.x = mouse.x;
  _prevMousePos.y = mouse.y;
}

CharacterDirection _get_direction_from_input() {
  if (inputUp.IsPressed()) {
    if (inputLeft.IsPressed()) return eDirectionUpLeft;
    if (inputRight.IsPressed()) return eDirectionUpRight;
    return eDirectionUp;
  }
  if (inputDown.IsPressed()) {
    if (inputLeft.IsPressed()) return eDirectionDownLeft;
    if (inputRight.IsPressed()) return eDirectionDownRight;
    return eDirectionDown;
  }
  if (inputLeft.IsPressed()) return eDirectionLeft;
  if (inputRight.IsPressed()) return eDirectionRight;
  
  return eDirectionNone;
}

bool _has_control_that_needs_cursor() {
  GUIControl* control = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
  return (
    control != null && (
      control.AsButton != null && control.AsButton.MouseOverGraphic == 0 ||
      control.AsSlider != null
    )
  );
}

void _update_mouse_visibility() {
  readonly bool nextVisibility = !IsInBlockingScript() && (_arrowSelectEnabled || !Cursor.Locked || player.ActiveInventory != null || (GUIStack.ShowingGUI && _has_control_that_needs_cursor()));
  if (mouse.Visible != nextVisibility) mouse.Visible = nextVisibility;
}

#endregion // Private

#region Public

bool get_ArrowSelectEnabled(static Cursor) {
  return _arrowSelectEnabled;
}

int get_Speed(static Cursor) {
  return _cursorSpeed;
}

bool get_Locked(static Cursor) {
  return _cursorLocked;
}


bool get_HasClickTarget(static Cursor) {
  return _cursorClickTarget.x > 0 || _cursorClickTarget.y > 0;
}

static void Cursor::SetClickTarget(Point* clickTarget, bool force) {
  if (force || _cursorClickTarget.x != clickTarget.x || _cursorClickTarget.y != clickTarget.y) {
    _cursorClickTarget.x = clickTarget.x;
    _cursorClickTarget.y = clickTarget.y;
    mouse.SetRoomPosition(_cursorClickTarget.x, _cursorClickTarget.y);
  }
}

static void Cursor::ClearClickTarget() {
  _cursorClickTarget.x = 0;
  _cursorClickTarget.y = 0;
}

static void Cursor::SetLocked(bool locked) {
  if (_cursorLocked == locked) return;
  _cursorLocked = locked;
  System.Log(eLogDebug, "[Cursor] Set Locked to %d",  locked);
}

static void Cursor::SetArrowSelectEnabled(bool enabled) {
  _arrowSelectEnabled = enabled;
}

static void Cursor::SetMousePositionToClickTarget() {
  if (!GUIStack.GUICount > 0 && !IsGamePaused() && Cursor.HasClickTarget) {
    Point *screenPoint = Screen.RoomToScreenPoint(_cursorClickTarget.x, _cursorClickTarget.y);
    Mouse.SetPosition(screenPoint.x, screenPoint.y);
    _store_mouse_pos();
  }
}

static void Cursor::MoveByInput() {
  CharacterDirection direction = _get_direction_from_input();
  if (direction != eDirectionNone && !_is_button_pressed(direction)) {
    ArrowSelect.moveCursorDirection(direction);
    _update_mouse_visibility();
    _track_button_press(direction);
  }
}

static void Cursor::SetSpeed(int value) {
  if (_cursorSpeed != value) {
    _cursorSpeed = TweenMaths.ClampInt(value, 10, 70);
    _reset_rate_of_motion();
  }
}

#endregion // Public

#region Private

int _cleanup_axis_value(int value) {
  readonly int maxValue = (CONTROLLER_AXIS_RANGE_MAX * 90) / 100;  // Assume CONTROLLER_AXIS_RANGE_MAX = 32767
  return TweenMaths.ClampInt(value, -maxValue, maxValue);
}

void _update_buttonPressedTimer() {
  if (_buttonPressedTimer == 0) return;
  // TODO: check if axis/button has been released and pressed, and cancel just pressed?
  _buttonPressedTimer -= 1;
  if (_buttonPressedTimer == 0) {
    _lastDebouncedDirection = eDirectionNone;
  }
}

void _update_arrow_select() {
  if (_arrowSelectEnabled && _walkAxisMoving) {
    Cursor.MoveByInput();
  }
}

void _track_cursor_axis() {
  if (axisCursorX.InDeadZone && axisCursorY.InDeadZone) return;

  readonly float axisX = IntToFloat(axisCursorX.Value);
  readonly float axisY = IntToFloat(axisCursorY.Value);
  readonly float maxRange = IntToFloat(_cleanup_axis_value(CONTROLLER_AXIS_RANGE_MAX));
  
  // Calculate magnitude and normalize to 0-1 range
  readonly float magnitude = Maths.Sqrt(axisX * axisX + axisY * axisY);
  readonly float normalizedMagnitude = TweenMaths.MinFloat(magnitude / maxRange, 1.0);
  
  // Apply exponential response curve to overall magnitude
  readonly float exponentialFactor = 2.5; // Controls curve steepness
  readonly float responseMagnitude = (Maths.Exp(exponentialFactor * normalizedMagnitude) - 1.0) / 
                                    (Maths.Exp(exponentialFactor) - 1.0);
  readonly float scaledMagnitude = responseMagnitude * _rateOfMotion;
  
  // Calculate movement deltas directly from normalized direction vector
  int deltaX = 0, deltaY = 0;
  if (magnitude > 0.0) {
    deltaX = FloatToInt((axisX / magnitude) * scaledMagnitude, eRoundNearest);
    deltaY = FloatToInt((axisY / magnitude) * scaledMagnitude, eRoundNearest);
  }
  
  Cursor.SetClickTarget(Screen.ScreenToRoomPoint(mouse.x + deltaX, mouse.y + deltaY), true);
  if (Cursor.Locked) {
    Cursor.SetLocked(false);
  }
}

void _track_axis() {
  if (IsInBlockingScript()) return;
  
  _track_cursor_axis();

  // Walk axis tracking remains the same
  if (!_walkAxisMoving && (axisLeftHorizontal.IsPressed || axisLeftVertical.IsPressed)) {
    _walkAxisMoving = true;
    Cursor.SetLocked(!axisCursorX.IsMoving() && !axisCursorY.IsMoving() && player.ActiveInventory == null);
  }
  else if (_walkAxisMoving && axisLeftHorizontal.InDeadZone && axisLeftVertical.InDeadZone) { 
    _walkAxisMoving = false;
  }
}

#endregion // Private

#region Events

void game_start() {
  _cursorClickTarget = new Point;
  _prevMousePos = new Point;
  _lastDebouncedDirection = eDirectionNone;
  
  Cursor.SetSpeed(CURSOR_DEFAULT_SPEED);
  
  // Enable clickability only when inventory is cursor and player has use inv interaction
  player.Clickable = false;
  
  Cursor.SetLocked(Input.ControllerConnected || System.OperatingSystem == eOSNintendo);
  
#ifdef DEBUG
  _dbgSprite = DynamicSprite.Create(Screen.Width, Screen.Height, true);
  _dbgOverlay = Overlay.CreateGraphical(0, 0, _dbgSprite.Graphic, true);
  _dbgOverlay.ZOrder = 9999;
#endif
}

void on_event(EventType e, int data) {
  if (e == eEventRestoreGame) {
    _reset_rate_of_motion();
  }
  else if (e == eEventEnterRoomBeforeFadein) {
    if (Input.ControllerConnected) {
      Cursor.SetLocked(true);
    }
    _store_mouse_pos();
  }
}

void repeatedly_execute() {
  if (
    Signal.WasDispatched("gui_pushed") ||
    Signal.WasDispatched("gui_popped") && GUIStack.GUICount == 0
  ) {
    _store_mouse_pos(); 
    return;
  }
  
  if (Cursor.Locked && !_walkAxisMoving && (_prevMousePos.x != mouse.x || _prevMousePos.y != mouse.y)) {
    Cursor.SetLocked(false);
  }
  
  if (Signal.WasDispatched("controller_connected")) {
    _reset_rate_of_motion();
  }
}

void repeatedly_execute_always() {
  _update_buttonPressedTimer();
  
  if (Game.SkippingCutscene) {
    if (mouse.Visible) mouse.Visible = false;
    return;
  }
  
  _update_mouse_visibility();
  
  if (player.IsEnabled() && player.IsInteractionAvailable(eModeUseinv) && (player.Clickable && player.ActiveInventory == null || !player.Clickable && player.ActiveInventory != null)) {
    player.Clickable = !player.Clickable;
    System.Log(eLogDebug, "Player clickable = %d, hasActiveInventory = %d, ",  player.Clickable, player.ActiveInventory != null);
  }
  
  if (!_arrowSelectEnabled && player.IsEnabled() && IsInterfaceEnabled() && !IsInBlockingScript() && !GUIStack.ShowingGUI && player.ActiveInventory == null) {
    if (Cursor.Locked && !Cursor.HasClickTarget && _walkAxisMoving) {
      readonly Point* p = Screen.RoomToScreenPoint(player.x, player.GetCenterY());
      Mouse.SetPosition(p.x, p.y);
    }
  }
  
  _track_axis();
  _update_arrow_select();
  _store_mouse_pos();
}

#endregion // Events

