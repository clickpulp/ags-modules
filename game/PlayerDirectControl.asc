// License for this module is TBD
// AGS PLAYER DIRECT CONTROL MODULE (ags-player-direct-control-module)
// Based on KeyboardMovement module by strazer, and CharacterControl Rui "Brisby" Pires.

#region Definitions

#define DISTANCE 40 // Distance player walks mode before they stop

// TODO: Replace with CharacterDirection
enum KeyboardMovement_Directions {
	eKeyboardMovement_Stop, 
	eKeyboardMovement_DownLeft, 
	eKeyboardMovement_Down, 
	eKeyboardMovement_DownRight, 
	eKeyboardMovement_Left, 
	eKeyboardMovement_Right, 
	eKeyboardMovement_UpLeft, 
	eKeyboardMovement_Up, 
	eKeyboardMovement_UpRight
};

#endregion // Definitions

#region Variables

KeyboardMovement_Directions _currentDirection = eKeyboardMovement_Stop; // stores current walking direction of player character

bool _walkingWithKeyboard = false; // Flag to set when walking with keyboard

float jr;
KeyboardMovement_Directions dirs[8];

#endregion // Variables

#region Events

void game_start() {
  dirs[0] = eKeyboardMovement_Right; // arctan is 0 for x = 1 && y = 0
  dirs[1] = eKeyboardMovement_DownRight; // arctan is 45° for x = 1 && y = 1
  dirs[2] = eKeyboardMovement_Down; // etc.
  dirs[3] = eKeyboardMovement_DownLeft;
  dirs[4] = eKeyboardMovement_Left;
  dirs[5] = eKeyboardMovement_UpLeft;
  dirs[6] = eKeyboardMovement_Up;
  dirs[7] = eKeyboardMovement_UpRight;
  
  jr = IntToFloat(32768);
}

void repeatedly_execute() {
	if (IsGamePaused() || !IsInterfaceEnabled() || !player.on /* || SelectableGUI */)
    return;

	KeyboardMovement_Directions newdirection; // declare variable storing new direction

	// get new direction:
	if (inputDown.IsPressed() && inputRight.IsPressed()) newdirection = eKeyboardMovement_DownRight;
	else if (inputUp.IsPressed() && inputRight.IsPressed()) newdirection = eKeyboardMovement_UpRight;
	else if (inputDown.IsPressed() && inputLeft.IsPressed()) newdirection = eKeyboardMovement_DownLeft;
	else if (inputUp.IsPressed() && inputLeft.IsPressed()) newdirection = eKeyboardMovement_UpLeft;
	else if (inputDown.IsPressed()) newdirection = eKeyboardMovement_Down; // down arrow
	else if (inputLeft.IsPressed()) newdirection = eKeyboardMovement_Left; // left arrow
	else if (inputRight.IsPressed()) newdirection = eKeyboardMovement_Right; // right arrow
	else if (inputUp.IsPressed()) newdirection = eKeyboardMovement_Up; // up arrow
	else newdirection = eKeyboardMovement_Stop; // if none of the above held down, set it to stop player character
 
  int xa = inputLeft.GetAxis() + inputRight.GetAxis();
  int ya = inputDown.GetAxis() + inputUp.GetAxis();
  if (xa > -GAMEPAD_DEADZONE && xa < GAMEPAD_DEADZONE) xa = 0;
  if (ya > -GAMEPAD_DEADZONE && ya < GAMEPAD_DEADZONE) ya = 0;
  
  if (xa != 0 || ya != 0) {
    float fDir = Maths.ArcTan2(IntToFloat(ya) / jr, IntToFloat(xa) / jr);
    // [-Pi;Pi] => [0;7]
    // convert to degrees, 8 directions means each occupies 45°, shift by half that
    // add 360 to ensure positive angle
    // divide by 45 to get to 8 dirs
    // mod 8 to clamp to [0;7] range
    int dir = ((FloatToInt(Maths.RadiansToDegrees(fDir) + 22.5, eRoundNearest) + 360) / 45) % 8;
    newdirection = dirs[dir]; // grab direction from dirs array
  }
  
  if (newdirection == eKeyboardMovement_Stop) {
    if (_walkingWithKeyboard) {
      if (player.Moving) player.StopMoving();
      _walkingWithKeyboard = false;
    }
  }
	else { // if new direction is NOT the Stop command
    int dx, dy; // declare variables storing new walk coordinates
    readonly int kDistance = (DISTANCE * 100) / player.Scaling;
    
    if (newdirection == eKeyboardMovement_DownRight) {
      dx = kDistance;
      dy = kDistance;
    }
    else if (newdirection == eKeyboardMovement_UpRight) {
      dx = kDistance;
      dy = -kDistance;
    }
    else if (newdirection == eKeyboardMovement_DownLeft) {
      dx = -kDistance;
      dy = kDistance;
    }
    else if (newdirection == eKeyboardMovement_UpLeft) {
      dx = -kDistance;
      dy = -kDistance;
    }
    else if (newdirection == eKeyboardMovement_Down) {
      dx = 0;
      dy = kDistance;
    }
    else if (newdirection == eKeyboardMovement_Left) {
      dx = -kDistance;
      dy = 0;
    }
    else if (newdirection == eKeyboardMovement_Right) {
      dx = kDistance;
      dy = 0;
    }
    else if (newdirection == eKeyboardMovement_Up) {
      dx = 0;
      dy = -kDistance;
    }

    _walkingWithKeyboard = true;
    player.Walk(player.x + dx, player.y + dy, eNoBlock); // walk player character to the new coordinates
  }
  
  _currentDirection = newdirection; // update current direction to new direction
}

void on_event(EventType event, int data) {
	if (event == eEventLeaveRoom) _currentDirection = eKeyboardMovement_Stop;
}

#endregion // Events