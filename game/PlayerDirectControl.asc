// License for this module is TBD
// AGS PLAYER DIRECT CONTROL MODULE (ags-player-direct-control-module)
// Based on KeyboardMovement module by strazer, and CharacterControl Rui "Brisby" Pires.

#region Definitions

#define WALKING_DISTANCE 20 // Distance player walks before they stop, based on 320px width
#define WALKING_DISTANCE_FACTOR (Screen.Width / 320) // How much to multiply the distance by
#define CONTROLLER_AXIS_RANGE_MAX_FLOAT 32768.0

#endregion // Definitions

#region Variables

CharacterDirection _axisDirections[8]; // Stores directions that can be extracted from axis movement
CharacterDirection _currentDirection = eDirectionNone; // Stores current walking direction of player character=
int _playerWalkSpeed;
bool _walkingWithModule = false; // Tracks when player is moved by this module

#endregion // Variables

#region Private

void _init_axis_directions() {
  _axisDirections[0] = eDirectionRight; // arctan is 0 for x = 1 && y = 0
  _axisDirections[1] = eDirectionDownRight; // arctan is 45° for x = 1 && y = 1
  _axisDirections[2] = eDirectionDown; // etc.
  _axisDirections[3] = eDirectionDownLeft;
  _axisDirections[4] = eDirectionLeft;
  _axisDirections[5] = eDirectionUpLeft;
  _axisDirections[6] = eDirectionUp;
  _axisDirections[7] = eDirectionUpRight;
}

int _get_walking_distance() {
  // Calc the distance based on the set distance times distance factor and account for player scale
  return (WALKING_DISTANCE * WALKING_DISTANCE_FACTOR * 100) / player.Scaling;
}

CharacterDirection _get_direction_from_input() {
  // Input from Axis
  if (inputLeft.HasAxisMapping) {
    int xa = inputLeft.GetAxis() + inputRight.GetAxis();
    int ya = inputDown.GetAxis() + inputUp.GetAxis();
    if (xa > -INPUT_AXIS_DEADZONE && xa < INPUT_AXIS_DEADZONE) xa = 0;
    if (ya > -INPUT_AXIS_DEADZONE && ya < INPUT_AXIS_DEADZONE) ya = 0;
    
    if (xa != 0 || ya != 0) {
      readonly float fDir = Maths.ArcTan2(
        IntToFloat(ya) / CONTROLLER_AXIS_RANGE_MAX_FLOAT,
        IntToFloat(xa) / CONTROLLER_AXIS_RANGE_MAX_FLOAT
      );
      // [-Pi;Pi] => [0;7]
      // convert to degrees, 8 directions means each occupies 45°, shift by half that
      // add 360 to ensure positive angle
      // divide by 45 to get to 8 dirs
      // mod 8 to clamp to [0;7] range
      readonly int index = ((FloatToInt(Maths.RadiansToDegrees(fDir) + 22.5, eRoundNearest) + 360) / 45) % 8;
      return _axisDirections[index];
    }
  }
  
  // Input from Button/Key Presses
  if (inputDown.IsPressed()) {
    if (inputRight.IsPressed()) return eDirectionDownRight;
    if (inputLeft.IsPressed()) return eDirectionDownLeft;
    return eDirectionDown;
  }
	if (inputUp.IsPressed()) {
    if (inputRight.IsPressed()) return eDirectionUpRight;
    if (inputLeft.IsPressed()) return eDirectionUpLeft;
    return eDirectionUp;
  }
	if (inputDown.IsPressed()) return eDirectionDown;
	if (inputLeft.IsPressed()) return eDirectionLeft;
	if (inputRight.IsPressed()) return eDirectionRight;
	if (inputUp.IsPressed()) return eDirectionUp;
	
  return eDirectionNone;
}

void _update_direction() {
  readonly CharacterDirection nextDirection = _get_direction_from_input();
  
  if (nextDirection == eDirectionNone) {
    if (_walkingWithModule) {
      if (player.Moving) {
        player.StopMoving();
        
        if (_playerWalkSpeed > 0) {
          player.SetWalkSpeed(_playerWalkSpeed, _playerWalkSpeed);
          _playerWalkSpeed = 0;
        }
      }
      _walkingWithModule = false;
    }
  }
	else {
    int dx,  dy;
    readonly int kDistance = _get_walking_distance();
    
    switch (nextDirection) {
      case eDirectionDownRight:
        dx = kDistance;
        dy = kDistance;
        break;
      case eDirectionUpRight:
        dx = kDistance;
        dy = -kDistance;
        break;
      case eDirectionDownLeft:
        dx = -kDistance;
        dy = kDistance;
        break;
      case eDirectionUpLeft:
        dx = -kDistance;
        dy = -kDistance;
        break;
      case eDirectionDown:
        dx = 0;
        dy = kDistance;
        break;
      case eDirectionUp:
        dx = 0;
        dy = -kDistance;
        break;
      case eDirectionLeft:
        dx = -kDistance;
        dy = 0;
        break;
      case eDirectionRight:
        dx = kDistance;
        dy = 0;
        break;
    }

    _walkingWithModule = true;
    player.Walk(player.x + dx, player.y + dy, eNoBlock);
  }
  
  if (_currentDirection == eDirectionNone && nextDirection != _currentDirection) {
    _playerWalkSpeed = player.WalkSpeedX;
  }
  _currentDirection = nextDirection;
}

float _calc_magnitude(float x, float y) {
  return Maths.Sqrt(x*x + y*y);
}

int _calc_walk_speed(int min, int max) {  
  if (axisLeftHorizontal.IsMovingByAxis || axisLeftVertical.IsMovingByAxis) {
    readonly float mag = _calc_magnitude(IntToFloat(axisLeftHorizontal.Value), IntToFloat(axisLeftVertical.Value));
    readonly float factor = (mag - IntToFloat(INPUT_AXIS_DEADZONE)) / IntToFloat(CONTROLLER_AXIS_RANGE_MAX - INPUT_AXIS_DEADZONE);
    return TweenMaths.Lerp(IntToFloat(min), IntToFloat(max), factor);
  }
  
  return max;
}

void _update_walk_speed() {
  if (_walkingWithModule && _playerWalkSpeed > 0) {
    readonly int nextWalkSpeed = _calc_walk_speed(1, _playerWalkSpeed);
    if (nextWalkSpeed != player.WalkSpeedX) {
      player.SetWalkSpeed(nextWalkSpeed, nextWalkSpeed);
    }
  }
}

#endregion // Private

#region Events

void game_start() {
  _init_axis_directions();
}

void repeatedly_execute() {
	if (IsGamePaused() || !IsInterfaceEnabled() || !player.on /* || SelectableGUI */)
    return;

	_update_direction();
  _update_walk_speed();
}

void on_event(EventType event, int data) {
	if (event == eEventLeaveRoom) {
    _currentDirection = eDirectionNone;
    _walkingWithModule = false;
  }
}

#endregion // Events