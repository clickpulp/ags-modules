// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
// Portions derived from the AGS KeyboardControl module by strazer and Rui Pires
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#define BUTTON_PRESSED_LOOPS 8

int _buttonPressedTimer;
eKeyCode _lastDebouncedKeyCode; // Add this new variable

#region Private

eKeyCode _get_dialog_keycode_from_input() {
  if (!inputPrimaryButton.MappedKeyPressed && inputPrimaryButton.IsPressed(eOnce)) {
    return inputPrimaryButton.GetMappedKey();
  }
  if (!inputUp.MappedKeyPressed && inputUp.IsPressed()) {
    return inputUp.GetMappedKey();
  }
  if (!inputDown.MappedKeyPressed && inputDown.IsPressed()) {
    return inputDown.GetMappedKey();
  }
  
  return eKeyNone;
}

void _trackButtonPress(eKeyCode keyCode) { // Modified to accept keyCode parameter
  if (_buttonPressedTimer > 0 && _lastDebouncedKeyCode == keyCode) return; // Only continue debouncing same key
  _buttonPressedTimer = BUTTON_PRESSED_LOOPS; // TODO: Account for GetGameSpeed()
  _lastDebouncedKeyCode = keyCode; // Track which key is being debounced
}

bool _isButtonPressed(eKeyCode keyCode) { // Modified to accept keyCode parameter
  return _buttonPressedTimer > 0 && _lastDebouncedKeyCode == keyCode; // Only debounce if same key
}

void _update_buttonPressedTimer() {
  if (_buttonPressedTimer == 0) return;
  // TODO: check if axis/button has been released and pressed, and cancel just pressed?
  _buttonPressedTimer -= 1;
  if (_buttonPressedTimer == 0) {
    _lastDebouncedKeyCode = eKeyNone; // Clear the debounced key when timer expires
  }
}

void _handle_gui_input() {
  if (inputPrimaryButton.IsPressed(eOnce)) {
    mouse.Click(eMouseLeft);
  }
  else if (inputSecondaryButton.IsPressed(eOnce)) {
    if (GUIStack.TopGUI == pulpGlobals.InventoryGUI) {
      if (player.ActiveInventory != null) {
        player.ActiveInventory = null;
      }
      else Signal.Dispatch("toggle_inv");
    }
    else {
      GUIStack.PopGUI();
    }
  }
  else if (inputExamineButton.IsPressed(eOnce)) {
    if (pulpGlobals.InventoryGUI != null && pulpGlobals.InventoryGUI.Visible) {
      mouse.Click(eMouseRight);
    }
    else {
      mouse.Click(eMouseLeft);
    }
  }
  else if (inputInvButton.IsPressed(eOnce) && !GUIStack.IsGUIInStack(pulpGlobals.MainMenuGUI)) {
    Signal.Dispatch("toggle_inv");
  }
  else if (inputSkipOrPauseButton.IsPressed(eOnce) && pulpGlobals.MainMenuGUI != null) {
    if (GUIStack.IsGUIInStack(pulpGlobals.MainMenuGUI)) {
      GUIStack.PopAllGUIs(pulpGlobals.MainMenuGUI);
    }
    else Signal.Dispatch("show_main_menu");
  }
  else {
    Cursor.MoveByInput();
  }
}

void _handle_dialog_input() {
  if (inputPrimaryButton.IsPressed(eOnce) || inputSecondaryButton.IsPressed(eOnce) || inputExamineButton.IsPressed(eOnce)) {
    mouse.Click(eMouseLeft);
  }
  else {
    eKeyCode keyCode = _get_dialog_keycode_from_input();
    if (keyCode != eKeyNone && !_isButtonPressed(keyCode)) { // Check if this specific key is being debounced
      Game.SimulateKeyPress(keyCode);
      _trackButtonPress(keyCode); // Pass the keyCode to track it
    }
  }
}

void _handle_blocking_input() {
  if (inputPrimaryButton.IsPressed(eOnce) || inputSecondaryButton.IsPressed(eOnce) || inputExamineButton.IsPressed(eOnce))  {
    mouse.Click(eMouseLeft);
  }
  else if (Game.InSkippableCutscene) {    
    if (inputSkipOrPauseButton.IsPressed(eOnce)) {
      SkipCutscene();
    }
  }
}

int _find_next_valid_inv_item(InvWindow* inv, int startIndex, Direction d) {
  int step = 1;
  if (d == eBackwards) step = -1;
  int count = inv.ItemCount;
  
  for (int i = 0; i < count; i++) {
    int index = (startIndex + i * step + count) % count;
    InventoryItem* item = inv.ItemAtIndex[index];
    if (!item.GetProperty("InstantUse")) {
      return index;
    }
  }
  
  return -1; // No valid item found
}

void _scroll_inv_cursor(Direction d) {
  if (pulpGlobals.InventoryGUI == null) return;
  
  InvWindow* inv;
  
  for (int i = 0; i < pulpGlobals.InventoryGUI.ControlCount; i++) {
    inv = pulpGlobals.InventoryGUI.Controls[i].AsInvWindow;
    if (inv != null) break;
  }
  
  if (inv == null || inv.ItemCount == 0) return;
  
  int nextIndex = -1;
  
  if (player.ActiveInventory == null) {
    // Start from beginning or end based on direction
    int startIndex;
    if (d == eForwards) startIndex = 0; else startIndex = inv.ItemCount - 1;
    nextIndex = _find_next_valid_inv_item(inv, startIndex, d);
  }
  else {
    // Find current item and get next valid item
    for (int i = 0; i < inv.ItemCount; i++) {
      if (inv.ItemAtIndex[i] == player.ActiveInventory) {
        int nextStart;
        if (d == eForwards) nextStart = i + 1; else nextStart = i - 1;
        nextIndex = _find_next_valid_inv_item(inv, nextStart, d);
        break;
      }
    }
  }
 
  if (nextIndex >= 0) player.ActiveInventory = inv.ItemAtIndex[nextIndex];
  else player.ActiveInventory = null;
  
}

void _handle_room_input() {
  if (inputPrimaryButton.IsPressed(eOnce)) {
    if (player.ActiveInventory == null && Cursor.Locked && !Cursor.HasClickTarget && !Cursor.ArrowSelectEnabled) {
      Cursor.SetLocked(false);
    }
    else {
      Cursor.SetMousePositionToClickTarget();
      mouse.Click(eMouseLeft);
    }
  }
  else if (inputSecondaryButton.IsPressed(eOnce)) {
    if (player.IsEnabled()) {
      if (!Cursor.Locked || Cursor.HasClickTarget) {      
        if (player.ActiveInventory != null) {
          player.ActiveInventory = null;
        }
        else {
          Mouse.Click(eMouseLeft);
        }
      }
      else if (Cursor.Locked && Cursor.ArrowSelectEnabled) {
        Mouse.Click(eMouseLeft);
      }
      else if (Cursor.Locked && !Cursor.HasClickTarget) {
        Cursor.SetLocked(false);
      }
    }
    else if (!Cursor.Locked || Cursor.ArrowSelectEnabled) {
      mouse.Click(eMouseLeft);
    }
  }
  else if (inputExamineButton.IsPressed(eOnce)) {
    if (mouse.Visible || Cursor.HasClickTarget || Cursor.ArrowSelectEnabled) {
      if (!Cursor.ArrowSelectEnabled) Cursor.SetMousePositionToClickTarget();
      mouse.Click(eMouseRight);
    } else {
      Signal.Dispatch("toggle_hints");
    }
  }
  else if (inputSkipOrPauseButton.IsPressed(eOnce)) {
    Signal.Dispatch("show_main_menu");
  }
  else if (inputInvButton.IsPressed(eOnce)) {
    Signal.Dispatch("toggle_inv");
  }
  else if (inputPrevPage.IsPressed(eOnce)) {
    _scroll_inv_cursor(eBackwards);
  }
  else if (inputNextPage.IsPressed(eOnce)) {
    _scroll_inv_cursor(eForwards);
  }
}

#endregion // Private

#region Events

void repeatedly_execute_always() { 
  if (IsInBlockingScript()) _handle_blocking_input();
  else {
    if (Cursor.Locked && (Mouse.IsButtonDown(eMouseLeft) || Mouse.IsButtonDown(eMouseRight))) {
      Cursor.SetLocked(false);
    }
    if (Dialog.IsDialogRunning()) _handle_dialog_input();
    else if (GUIStack.ShowingGUI) _handle_gui_input();
    else _handle_room_input();
  }  
}

void repeatedly_execute() {
  _update_buttonPressedTimer();
}

void dialog_options_repexec(DialogOptionsRenderingInfo *info) {   
  _update_buttonPressedTimer();
}

#endregion // Events