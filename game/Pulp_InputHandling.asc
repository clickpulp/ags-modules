// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
// Portions derived from the AGS KeyboardControl module by strazer and Rui Pires
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#define BUTTON_PRESSED_LOOPS 6

int _buttonPressedTimer;

#region Private

eKeyCode _get_character_direction_from_input() {
  if (inputUp.IsPressed()) {
    if (inputLeft.IsPressed()) return eDirectionUpLeft;
    if (inputRight.IsPressed()) return eDirectionUpRight;
    return eDirectionUp;
  }
  if (inputDown.IsPressed()) {
    if (inputLeft.IsPressed()) return eDirectionDownLeft;
    if (inputRight.IsPressed()) return eDirectionDownRight;
    return eDirectionDown;
  }
  if (inputLeft.IsPressed()) return eDirectionLeft;
  if (inputRight.IsPressed()) return eDirectionRight;
  
  return eDirectionNone;
}

eKeyCode _get_dialog_keycode_from_input() {
  if (!inputPrimaryButton.MappedKeyPressed && inputPrimaryButton.IsPressed(eOnce)) {
    return inputPrimaryButton.GetMappedKey();
  }
  if (!inputUp.MappedKeyPressed && inputUp.IsPressed()) {
    return inputUp.GetMappedKey();
  }
  if (!inputDown.MappedKeyPressed && inputDown.IsPressed()) {
    return inputDown.GetMappedKey();
  }
  
  return eKeyNone;
}

void _trackButtonPress() {
  if (_buttonPressedTimer > 0) return;
  _buttonPressedTimer = BUTTON_PRESSED_LOOPS; // TODO: Account for GetGameSpeed()
}

bool _isButtonPressed() {
  return _buttonPressedTimer > 0;
}

void _update_buttonPressedTimer() {
  if (_buttonPressedTimer == 0) return;
  // TODO: check if axis/button has been released and pressed, and cancel just pressed?
  _buttonPressedTimer -= 1;
}

void _handle_gui_input() {
  if (inputPrimaryButton.IsPressed(eOnce)) {
    mouse.Click(eMouseLeft);
  }
  else if (inputSecondaryButton.IsPressed(eOnce)) {
    if (gInventoryBar.Visible && player.ActiveInventory != null) {
      player.ActiveInventory = null;
      mouse.Mode = eModeInteract;
    }
    else {
      GUIStack.PopGUI();
    }
  }
  else if (inputExamineButton.IsPressed(eOnce) && pulpGlobals.InventoryGUI != null && pulpGlobals.InventoryGUI.Visible) {
    mouse.Click(eMouseRight);
  }
  else if (inputInvButton.IsPressed(eOnce)) {
    Signal.Dispatch("toggle_inv");
  }
  else if (inputPauseButton.IsPressed(eOnce) && pulpGlobals.MainMenuGUI != null) {
    if (GUIStack.IsGUIInStack(pulpGlobals.MainMenuGUI)) {
      GUIStack.PopAllGUIs(pulpGlobals.MainMenuGUI);
    }
    else Signal.Dispatch("show_main_menu");
  }
  else if (!_isButtonPressed()) {
    CharacterDirection direction = _get_character_direction_from_input();
    if (direction != eDirectionNone) {
      ArrowSelect.moveCursorDirection(direction);
      _trackButtonPress();
    }
  }
}

void _handle_dialog_input() {
  if (inputPrimaryButton.IsPressed(eOnce) || inputSecondaryButton.IsPressed(eOnce)) mouse.Click(eMouseLeft);
  else if (!_isButtonPressed()) {
    eKeyCode keyCode = _get_dialog_keycode_from_input();
    if (keyCode != eKeyNone) {
      Game.SimulateKeyPress(keyCode);
      _trackButtonPress();
    }
  }
}

void _handle_blocking_input() {
  if (inputPrimaryButton.IsPressed(eOnce) || inputSecondaryButton.IsPressed(eOnce)) mouse.Click(eMouseLeft);
  else if (Game.InSkippableCutscene) {    
    if (inputSkipButton.IsPressed(eOnce)) {
      SkipCutscene();
    }
  }
}

void _handle_room_input() {
  if (inputPrimaryButton.IsPressed(eOnce)) {
    if (Cursor.Locked && !Cursor.HasClickTarget) {
      Cursor.SetLocked(false);
    }
    else {
      Cursor.SetMousePositionToClickTarget();
      mouse.Click(eMouseLeft);
    }
  }
  else if (inputSecondaryButton.IsPressed(eOnce)) {
    if (player.on) {
      if (!Cursor.Locked || Cursor.HasClickTarget) {      
        if (player.ActiveInventory != null) {
          player.ActiveInventory = null;
        }
        else {
          Mouse.Click(eMouseLeft);
        }
      }
      else if (Cursor.Locked && !Cursor.HasClickTarget) {
        Cursor.SetLocked(false);
      }
    }
  }
  else if (inputExamineButton.IsPressed(eOnce)) {
    if (mouse.Visible || Cursor.HasClickTarget) {
      Cursor.SetMousePositionToClickTarget();
      mouse.Click(eMouseRight);
    }
  }
  else if (inputPauseButton.IsPressed(eOnce)) {
    Signal.Dispatch("show_main_menu");
  }
  else if (inputInvButton.IsPressed(eOnce)) {
    Signal.Dispatch("toggle_inv");
  }
}

#endregion // Private

#region Events

void repeatedly_execute_always() { 
  if (IsInBlockingScript()) _handle_blocking_input();
  else if (Dialog.IsDialogRunning()) _handle_dialog_input();
  else if (GUIStack.ShowingGUI) _handle_gui_input();
  else _handle_room_input();
}

void repeatedly_execute() {
  _update_buttonPressedTimer();
}

void dialog_options_repexec(DialogOptionsRenderingInfo *info) {   
  _update_buttonPressedTimer();
}

#endregion // Events