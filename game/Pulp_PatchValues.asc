// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

Dictionary* _valuesByName;

#region Private

void _set_value(String key, String value) {
  if (_valuesByName != null && value == null) {
    _valuesByName.Remove(key);
  }
  else {
    if (_valuesByName == null) _valuesByName = Dictionary.Create();
    _valuesByName.Set(key, value);
  }
}

String _get_value(String key, String defaultValue) {
  if (_valuesByName == null) return defaultValue;
  String value = _valuesByName.Get(key);
  if (value == null) return defaultValue;
  return value;
}

#endregion // Private

#region Public

static void PatchValues::Remove(String key) {
  if (_valuesByName != null && _valuesByName.Contains(key)) {
    _valuesByName.Remove(key);
  }
}

static void PatchValues::RemoveAll() {
  if (_valuesByName != null) _valuesByName.Clear();
}

static String PatchValues::GetString(String key, String defaultValue) {
  return _get_value(key, defaultValue);
}

static void PatchValues::SetString(String key, String value) {
  _set_value(key, value);
}

static int PatchValues::GetInt(String key, int defaultValue) {
  String value = _get_value(key, String.Format("%d", defaultValue));
  return value.AsInt;
}

static void PatchValues::SetInt(String key, int value) {
  _set_value(key, String.Format("%d", value));
}

static float PatchValues::GetFloat(String key, float defaultValue) {
  String value = _get_value(key, String.Format("%f", defaultValue));
  return value.AsFloat;
}

static void PatchValues::SetFloat(String key, float value) {
  _set_value(key, String.Format("%f", value));
}

#endregion // Public