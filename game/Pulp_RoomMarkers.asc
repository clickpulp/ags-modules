// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#define MAX_MARKERS 8

#region _RoomMarker

struct _RoomMarker {
  writeprotected int uid;
  protected Overlay* _overlay;
  protected RoomMarkerState _state;
  
  import protected void _UpdateTransparency();
  
  import RoomMarkerState GetState();
  import void SetState(RoomMarkerState state);
  
  import bool IsVisible();
  import void SetVisible(bool visible);
  
  import bool IsAvailable();
  import void Init(int uid, int x, int y, int graphic, RoomMarkerState state);
  import void Clear();
  import void Move(int x, int y);
  import void SetGraphic(int graphic);
};

protected void _RoomMarker::_UpdateTransparency() {
  if (this._overlay == null) return;
  
  if (this._state == eRoomMarkerStateInactive) {
    this._overlay.Transparency = 65;
  } else {
    this._overlay.Transparency = 0;
  }
}

bool _RoomMarker::IsAvailable() {
  return this.uid == SCR_NO_VALUE;
}

bool _RoomMarker::IsVisible() {
  return this._overlay != null && this._overlay.Transparency == 0;
}

void _RoomMarker::SetVisible(bool visible) {
  if (visible) this._UpdateTransparency();
  else if (this._overlay != null) this._overlay.Transparency = 100;
}

void _RoomMarker::Move(int x, int y) {
  if (this._overlay == null) return;
  
  this._overlay.X = TweenMaths.ClampInt(x - this._overlay.GraphicWidth/2, 10, Room.Width - this._overlay.GraphicWidth - 10);
  this._overlay.Y = TweenMaths.ClampInt(y - this._overlay.GraphicHeight/2, 10, Room.Height - this._overlay.GraphicHeight - 10);
}

void _RoomMarker::Clear() {
  if (this._overlay != null && this._overlay.Valid) {
    this._overlay.Remove();
    this._overlay = null;
  }
  
  this.uid = SCR_NO_VALUE;
  this._state = eRoomMarkerStateInactive;
}

RoomMarkerState _RoomMarker::GetState() {
  return this._state;
}

void _RoomMarker::SetState(RoomMarkerState state) {
  this._state = state;
  this._UpdateTransparency();
}

void _RoomMarker::Init(int uid, int x, int y, int graphic, RoomMarkerState state) {
  this.uid = uid;
  this._overlay = Overlay.CreateRoomGraphical(x, y, graphic, true);
  this.Move(x, y);
  this.SetState(state);
}

void _RoomMarker::SetGraphic(int graphic) {
  if (this._overlay.Graphic != graphic) {
    this._overlay.Graphic = graphic;
  }
}

#endregion // _RoomMarker


_RoomMarker _markers[MAX_MARKERS];


#region Helpers

bool _is_uid_taken(int uid) {
  for (int i = 0; i < MAX_MARKERS; i++) {
    if (_markers[i].uid == uid) {
      System.Log(eLogWarn, "RoomMarker unique id %d is not unique!", uid);
#ifdef DEBUG
      AbortGame("RoomMarker unique id %d is not unique!", uid);
#endif 
      return false;
    }
  }
  
  return true;
}

int _find_available_marker() {
  for (int i = 0; i < MAX_MARKERS; i++) {
    if (_markers[i].IsAvailable()) { 
      return i;
    }
  }
  
  return -1;
}

int _find_marker_index(int uid) {
  for (int i = 0; i < MAX_MARKERS; i++) {
    if (_markers[i].uid == uid) return i;
  }
  
  return -1;
}

#endregion // Helpers


#region RoomMarkers struct

static void RoomMarkers::Place(int uid, int x, int y, int graphic, RoomMarkerState state) {
  int index = _find_marker_index(uid);
  if (index < 0) {
    index = _find_available_marker();
    if (index >= 0) {
      _markers[index].Init(uid, x, y, graphic, state);
    }
    else {
      System.Log(eLogWarn, "Could not place marker with uid: %d", uid);
    }
  }
  else {
    _markers[index].SetGraphic(graphic);
    _markers[index].SetState(state);
    _markers[index].Move(x, y);
  }
}

static void RoomMarkers::Clear(int uid) {
  int index = _find_marker_index(uid);
  if (index >= 0) {
    _markers[index].Clear();
  }
  else {
    System.Log(eLogWarn, "Could not clear marker with uid: %d", uid);
  }
}

static void RoomMarkers::ClearAll() {
  for (int i = 0; i < MAX_MARKERS; i++) {
    _markers[i].Clear();
  }
}

#endregion // RoomMarkers struct


#region Events

void game_start() {
  RoomMarkers.ClearAll();
}

void on_event(EventType type, int data) {
  switch (type) {
    case eEventLeaveRoomAfterFadeout:
      RoomMarkers.ClearAll();
    break;
  }
}

#endregion // Events