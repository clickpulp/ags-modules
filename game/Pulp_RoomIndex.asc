// TERMS OF USE - ROOM INDEX MODULE (ags-room-index-module)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
// Portions (c) 2018 Artium Nihamkin, artium@nihamkin.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#region Definitions

/** 
  * The the highest ID of a hotspot in the room. This is required because a 
  * static allocation for data in this module.
  * To disable hints on hotspots, set this to 0.
  */
#define MAX_ROOM_HOTSPOSTS_SUPPORTED 50

/** 
  * The the highest ID of a character in the game. This is required because a 
  * static allocation for data in this module.
  * To disable hints on charaters, set this to 0.
  */
#define MAX_CHARACTERS_SUPPORTED 5 // Update to your game's character count

/** 
  * The the highest ID of an object. This is required because a 
  * static allocation for data in this module.
  * To disable hints on objects, set this to 0.
  */
#define MAX_ROOM_OBJECTS_SUPPORTED 50

/*
 * IMPORTANT: This value should be the sum of 
 * MAX_ROOM_HOTSPOSTS_SUPPORTED,MAX_ROOM_OBJECTS_SUPPORTED,MAX_CHARACTERS_SUPPORTED
 */
#define TOTAL_HINTS_SUPPORTED 105

struct RoomEntity {  
  bool initialised;
  int flags;
  Rect* bounds;
  
  import void Update(int x, int y, int flags);
  import void Clear();
};

#endregion // Definitions

#region Variables

RoomEntity _entities[TOTAL_HINTS_SUPPORTED];
RoomEntity _scannedEntities[TOTAL_HINTS_SUPPORTED];
int _scanStartY = 0;
int _scanCountY = 0;

#endregion

#region RoomEntity

void RoomEntity::Update(int x, int y, int flags) {
  if (this.bounds == null) this.bounds = Rect.Create(Screen.Width, Screen.Height, 0, 0);

  if (this.bounds.bottom < y) this.bounds.bottom = y;
  if (this.bounds.top > y) this.bounds.top = y;
  if (this.bounds.left > x) this.bounds.left = x;
  if (this.bounds.right < x) this.bounds.right = x;
  
  this.initialised = true;
  this.flags = flags;
}

void RoomEntity::Clear() {
  this.bounds = null;
  this.flags = eEntityFlagNone;
  this.initialised = false;
}

#endregion // _RoomElement

#region Private

int _get_hotspot_flags(Hotspot* hs) {
  int flags = eEntityFlagNone;

  if (hs == null) {
    System.Log(eLogWarn, "Tried to get flags for null Hotspot");
  }
  else {
    if (hs.IsInteractionAvailable(eModeInteract)) flags |= eEntityFlagInteract;
    if (hs.IsInteractionAvailable(eModeUseinv)) flags |= eEntityFlagUseInv;
    if (hs.IsInteractionAvailable(eModeLookat)) flags |= eEntityFlagLookAt;
    if (hs.GetProperty("Exit") > 0) flags |= eEntityFlagExit;
    if (hs.GetProperty("IsDoor")) flags |= eEntityFlagDoor;
    if (hs.GetProperty("IsSign")) flags |= eEntityFlagSign;
  }
  
  return flags;
}

int _get_character_flags(Character* c) {
  int flags = eEntityFlagNone;

  if (c == null) {
    System.Log(eLogWarn, "Tried to get flags for null Character");
  }
  else {
    if (c.IsInteractionAvailable(eModeInteract)) flags |= eEntityFlagInteract;
    if (c.IsInteractionAvailable(eModeUseinv)) flags |= eEntityFlagUseInv;
    if (c.IsInteractionAvailable(eModeLookat)) flags |= eEntityFlagLookAt;
  }
  
  return flags;
}

int _get_object_flags(Object* o) {
  int flags = eEntityFlagNone;

  if (o == null) {
    System.Log(eLogWarn, "Tried to get flags for null Hotspot");
  }
  else {
    if (o.IsInteractionAvailable(eModeInteract)) flags |= eEntityFlagInteract;
    if (o.IsInteractionAvailable(eModeUseinv)) flags |= eEntityFlagUseInv;
    if (o.IsInteractionAvailable(eModeLookat)) flags |= eEntityFlagLookAt;
    if (o.GetProperty("Exit") > 0) flags |= eEntityFlagExit;
    if (o.GetProperty("IsDoor")) flags |= eEntityFlagDoor;
    if (o.GetProperty("IsSign")) flags |= eEntityFlagSign;
  }
  
  return flags;
}

void _clear_scanned_entities() {
  for (int i = 0; i < TOTAL_HINTS_SUPPORTED; i++) {
    _scannedEntities[i].Clear();
  }
}

void _clear_entities() {
  for (int i = 0; i < TOTAL_HINTS_SUPPORTED; i++) {
    _entities[i].Clear();
  }
}

void _flush_scanned_entities() {
  for (int i = 0; i < TOTAL_HINTS_SUPPORTED; i++) {
    _entities[i].bounds = _scannedEntities[i].bounds;
    _entities[i].flags = _scannedEntities[i].flags;
    _entities[i].initialised = _scannedEntities[i].initialised;
  }
  _scanStartY = 0;
  _scanCountY = 0;
}

void _scan_room_on_screen(int startY, int countY) {
  readonly String kExitProp = "Exit";
  readonly int kInc = Screen.Width / 160;
  readonly int kLength = startY + countY;
  
  Hotspot* hs;
  Character* c;
  Object* obj;
  int x, y, flags;
 
  // Precalculate the bounding rectangle of each visible hotspot/object/character
  // Please notice that x,y are screen coordinares
  // We simply ignore stuff  that are not currently visible.
  for (y = startY; y < kLength; y += kInc) {
    for (x = 0; x < Screen.Width; x += kInc) {      
      flags = 0;
      
      hs = Hotspot.GetAtScreenXY(x, y);
      if (
        hs != null && hs != hotspot[0] && hs.Enabled && hs.ID < MAX_ROOM_HOTSPOSTS_SUPPORTED &&
        (hs.IsInteractionAvailable(eModeInteract) || hs.IsInteractionAvailable(eModeUseinv) || hs.GetProperty(kExitProp))
      ) {
        _scannedEntities[hs.ID].Update(x, y, _get_hotspot_flags(hs));
      }
      
      // NOTE: Any characters with the "Clickable" property set to false will not 
      // be seen by this function.
      c = Character.GetAtScreenXY(x, y);
      if (
        c != null && c != player && c.ID < MAX_CHARACTERS_SUPPORTED && c.Clickable &&
        (c.IsInteractionAvailable(eModeTalkto) || c.IsInteractionAvailable(eModeInteract) || c.IsInteractionAvailable(eModeUseinv))
      ) {
        _scannedEntities[c.ID + MAX_ROOM_HOTSPOSTS_SUPPORTED].Update(x, y, _get_object_flags(obj));
      }
      
      obj = Object.GetAtScreenXY(x, y);
      if (
        obj != null && obj.Clickable && obj.ID < MAX_ROOM_OBJECTS_SUPPORTED &&
        (obj.IsInteractionAvailable(eModeInteract) || obj.IsInteractionAvailable(eModeUseinv))
      ) {
        _scannedEntities[obj.ID + MAX_ROOM_HOTSPOSTS_SUPPORTED + MAX_CHARACTERS_SUPPORTED].Update(x, y, _get_object_flags(obj));
      }
    }
  }
}

void _scan_whole_room_on_screen() {
  _clear_scanned_entities();
  _scan_room_on_screen(0, Screen.Height);
  _flush_scanned_entities();
}

#endregion // Private

#region RoomIndex

int get_EntityCount(static RoomIndex) {
  return TOTAL_HINTS_SUPPORTED;
}

static bool RoomIndex::IsInitialized(int index) {
  return index < RoomIndex.EntityCount && _entities[index].initialised;
}

static Rect* RoomIndex::GetBounds(int index) {
  if (index < RoomIndex.EntityCount && _entities[index].bounds != null)
    return _entities[index].bounds.Copy();
  return null;
}

static int RoomIndex::GetFlags(int index) {
  if (index < RoomIndex.EntityCount) return _entities[index].flags;
  return eEntityFlagNone;
}

static int RoomIndex::ToHotspotIndex(int index) {
  if (index < MAX_ROOM_HOTSPOSTS_SUPPORTED)
    return index;
  return -1;
}

static int RoomIndex::ToCharacterIndex(int index) {
  if (index >= MAX_ROOM_HOTSPOSTS_SUPPORTED && index < MAX_ROOM_HOTSPOSTS_SUPPORTED + MAX_CHARACTERS_SUPPORTED)
    return index - MAX_ROOM_HOTSPOSTS_SUPPORTED;
  return -1;
}

static int RoomIndex::ToObjectIndex(int index) {
  if (index >= MAX_ROOM_HOTSPOSTS_SUPPORTED + MAX_CHARACTERS_SUPPORTED && index < MAX_ROOM_HOTSPOSTS_SUPPORTED + MAX_CHARACTERS_SUPPORTED + MAX_ROOM_OBJECTS_SUPPORTED)
    return index - (MAX_ROOM_HOTSPOSTS_SUPPORTED + MAX_CHARACTERS_SUPPORTED);
  return -1;
}

static bool RoomIndex::IsHotspot(int index) {
  return RoomIndex.ToHotspotIndex(index) >= 0;
}

static bool RoomIndex::IsCharacter(int index) {
  return RoomIndex.ToCharacterIndex(index) >= 0;
}

static bool RoomIndex::IsObject(int index) {
  return RoomIndex.ToCharacterIndex(index) >= 0;
}

static Hotspot* RoomIndex::GetHotspot(int index) {
  index = RoomIndex.ToHotspotIndex(index);
  if (index >= 0 && index < AGS_MAX_HOTSPOTS) return hotspot[index];
  
  System.Log(eLogWarn, "[RoomIndex] Tried to get Hotspot at invalid index %d", index);
  return null;
}

static Character* RoomIndex::GetCharacter(int index) {
  index = RoomIndex.ToCharacterIndex(index);
  if (index >= 0 && index < Game.CharacterCount) return character[index];
  
  System.Log(eLogWarn, "[RoomIndex] Tried to get Character at invalid index %d", index);
  return null;
}

static Object* RoomIndex::GetObject(int index) {
  index = RoomIndex.ToObjectIndex(index);
  if (index >= 0 && index < Room.ObjectCount) return object[index];
  
  System.Log(eLogWarn, "[RoomIndex] Tried to get Character at invalid index %d", index);
  return null;
}

#endregion 

#region Events

void game_start() {
  if (
    TOTAL_HINTS_SUPPORTED !=
      MAX_ROOM_HOTSPOSTS_SUPPORTED + 
      MAX_ROOM_OBJECTS_SUPPORTED +
      MAX_CHARACTERS_SUPPORTED
  ) {
    AbortGame("Invalid value for TOTAL_HOTSPOTS_SUPPORTED");
  }
}

void repeatedly_execute_always() {
  if (GUIStack.GUICount > 0 || Game.SkippingCutscene)
    return;
  
  if (_scanCountY == 0) _scanCountY = Screen.Height / GetGameSpeed();
  
  if (_scanStartY + _scanCountY > Screen.Height) {
    _flush_scanned_entities();
    _clear_scanned_entities();
  } else {  
    _scan_room_on_screen(_scanStartY, _scanCountY);
    _scanStartY += _scanCountY;
  }
}

void on_event(EventType type, int data) {
  switch (type) {
    case eEventEnterRoomBeforeFadein:      
      _scan_whole_room_on_screen();
      break;
      
    case eEventLeaveRoomAfterFadeout:
      _clear_entities();
      break;
      
    case eEventRestoreGame:
      _scan_whole_room_on_screen();
      break;
  }
}

#endregion // Events
