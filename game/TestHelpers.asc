// TERMS OF USE - AGS TEST HELPERS MODULE (ags-test-helpers-module)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

String _testDescription;
bool _failed;
bool _running;

#region Private

String _format_string_value(String value) {
  if (value == null) return "null";
  return String.Format("\"%s\"", value);
}

#endregion

#region Public

static void Test::Done() {
  if (!_running) return;
  
  String check;
  if (_failed) check = "FAILED";
  else check = "PASS";
  
  System.Log(eLogInfo, "========================================");
  System.Log(eLogInfo, "%s: %s", check, _testDescription);
  
  _running = false;
  _failed = false;
  _testDescription = String.Format("Test");
}

static void Test::Describe(const string description) {
  if (_running) Test.Done();
  _testDescription = String.Format("%s", description);
  _running = true;
}

void ExpectIntToBe(int actual, int expected, const string description) {
  if (actual != expected) {
    _failed = true;
    System.Log(eLogError, "%: [Not the same %s!\n\tActual: %d\n\tExpected: %d", _testDescription, description, actual, expected);
  }
}

void ExpectFloatToBe(float actual, float expected, const string description) {
  if (actual != expected) {
    _failed = true;
    System.Log(eLogError, "%s: Not the same %s!\n\tActual: %f\n\tExpected: %f", _testDescription, description, actual, expected);
  }
}

void ExpectStringToBe(String actual, String expected, const string description) {
  if (
    (expected == null && actual != null) ||
    (expected != null && actual == null) ||
    (expected != null && actual != null && actual != expected)
  ) {
    _failed = true;
    System.Log(eLogError, "%s: Not the same %s!\n\tActual: %s\n\tExpected: %s",
      _testDescription, description, _format_string_value(actual), _format_string_value(expected)
    );
  }
}

#endregion // Public

#region Events

void on_event(EventType event, int data) {
  if (event == eEventLeaveRoom) {
    if (_running) Test.Done();
  }
  else if (event == eEventEnterRoomBeforeFadein) {
    _testDescription = String.Format("Test");
  }
}

#endregion // Events

