// TERMS OF USE - Layered Character Module
//
// MIT License
//
// Copyright (c) 2025 Clickpulp, LLC
// Portions based on the design by Francisco Gonz√°lez at Grundislav Games
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

String _layerNames[];
String _animationNames[];
Keyframe* _keyframes[];
CharacterAnimation* _animations[];
CharacterLayer* _layers[];
LayeredCharacter* _characters[];

#region Private

void _Init() {
  _characters = new LayeredCharacter[LC_MAX_CHARACTERS];
    
  _layerNames = new String[_characters.Length * LC_MAX_LAYERS_PER_CHARACTER];
  _animationNames = new String[_characters.Length * LC_MAX_ANIMATIONS_PER_LAYER];
  _keyframes = new Keyframe[_characters.Length * LC_MAX_LAYERS_PER_CHARACTER * LC_MAX_KEYFRAMES_PER_LAYER];
  _animations = new CharacterAnimation[_characters.Length * LC_MAX_ANIMATIONS_PER_LAYER];
  _layers = new CharacterLayer[_characters.Length * LC_MAX_LAYERS_PER_CHARACTER];
}

int _FindFreeCharacterIndex() {
  for (int i = 0; i < _characters.Length; i++) {
    if (_characters[i] == null) {
      return i;
    }
  }
  
  return -1;
}

int _StoreAnimationNameInArray(String name) {
  for (int i = 0; i < _animationNames.Length; i++) {
    if (_animationNames[i] == name) {
      return i;
    }
  }
  
  // TODO: Warn/Error
  return -1;
}

int _StoreLayerNameInArray(String name) {
  for (int i = 0; i < _layerNames.Length; i++) {
    if (_layerNames[i] != null && _layerNames[i] == name) {
      return i;
    }
    
    if (_layerNames[i] == null) {
      _layerNames[i] = name;
      return i;
    }
  }
  
  // TODO: Warn/Error
  return -1;
}

#endregion

#region Public

void CharacterAnimation::Init(String name, int view, int loop, RepeatStyle repeatStyle, bool headless, Direction direction) {
  this.View = view;
  this.Loop = loop;
  this.RepeatStyle = repeatStyle;
  this.Headless = headless;
  this.Direction = direction;
  this.nameIndex = _StoreAnimationNameInArray(name);
}

String CharacterAnimation::get_Name() {
  return _animationNames[this.nameIndex];
}

static CharacterAnimation* CharacterAnimation::Create(String name, int view, int loop, RepeatStyle repeatStyle, bool headless, Direction direction) {
  CharacterAnimation* anim = new CharacterAnimation;
  anim.Init(name, view, loop, repeatStyle, headless, direction);
  return anim;
}


void CharacterLayer::Init(String name, Character* c, int layeredCharacterIndex, bool headless) {
  this.characterIndex = c.ID;
  this.layeredCharacterIndex = layeredCharacterIndex;
  this.Headless = headless;
  this.nameIndex = _StoreLayerNameInArray(name);
  this.visible = true;
  this.currentAnimationIndex = -1;
}

Character* CharacterLayer::GetCharacter() {
  return character[this.characterIndex];
}

String CharacterLayer::get_Name() {
  return _layerNames[this.nameIndex];
}

void CharacterLayer::set_Name(String name) {
  _layerNames[this.nameIndex] = name;
}

bool CharacterLayer::get_Visible() {
  return this.visible;
}

void CharacterLayer::set_Visible(bool value) {
  this.visible = value;
  Character* c = this.GetCharacter();
  if (this.visible) {
    c.Transparency = 0; 
  } else {
    c.Transparency = 100;
  }
  c.on = this.visible;
}

CharacterLayer* LayeredCharacter::geti_Layers(int index) {
  return _layers[this.Index + index];
}

LayeredCharacter* GetLayeredCharacter(this CharacterLayer*) {
  return _characters[this.layeredCharacterIndex];
}

CharacterAnimation* CharacterLayer::get_CurrentAnimation() {
  // Returns the currently playing animation for this layer, or null if no animation is active
  if (this.currentAnimationIndex >= 0 && this.currentAnimationIndex < _animations.Length && _animations[this.currentAnimationIndex] != null) {
    return _animations[this.currentAnimationIndex];
  }
  return null;
}


CharacterLayer* LayeredCharacter::GetLayerByName(String name) {
  for (int i = 0; i < this.LayerCount; i++) {
    CharacterLayer* layer = this.geti_Layers(i);
    if (layer.get_Name() == name) {
      return layer;
    }
  }
  
  // TODO: Warn/Error
  return null;
}

CharacterAnimation* CharacterLayer::GetAnimationByName(String animationName) {
  LayeredCharacter* lc = this.GetLayeredCharacter();
  if (lc == null) {
    return null;
  }
  
  for (int i = this.layeredCharacterIndex; i < this.layeredCharacterIndex + this.AnimationCount; i++) {
    if (_animations[i] != null && _animations[i].get_Name() == animationName) {
      return _animations[i];
    }
  }
  
  return null;
}

CharacterAnimation* LayeredCharacter::GetAnimationByName(String animationName) {
  for (int i = 0; i < this.LayerCount; i++) {
    CharacterLayer* layer = this.geti_Layers(i);
    CharacterAnimation* animation = layer.GetAnimationByName(animationName);
    if (animation != null) {
      return animation;
    }
  }
  
  return null;
}

void CharacterLayer::Animate(String animationName, RepeatStyle repeatStyleOverride, BlockingStyle blockingStyleOverride, Direction directionOverride) {
  Character* c = this.GetCharacter();
  CharacterAnimation* animation = this.GetAnimationByName(animationName);
  if (animation == null) {
    return; // TODO warn or error in debug mode
  }

  // Track the current animation for this layer
  for (int i = this.layeredCharacterIndex; i < this.layeredCharacterIndex + this.AnimationCount; i++) {
    if (_animations[i] == animation) {
      this.currentAnimationIndex = i;
      break;
    }
  }

  // Handle head visibility if this is a body layer
  LayeredCharacter* lc = this.GetLayeredCharacter();
  if (lc != null && this.get_Name() == "body") {
    CharacterLayer* headLayer = lc.GetLayerByName("head");
    if (headLayer != null) {
      headLayer.set_Visible(animation.Headless);
    }
  }

  c.UnlockView();
  if (animation.View != c.View) {
    c.LockView(animation.View);
  }

  RepeatStyle repeatStyle;
  if (repeatStyleOverride != -1) {
    repeatStyle = repeatStyleOverride;
  } else {
    repeatStyle = animation.RepeatStyle;
  }

  BlockingStyle blockingStyle;
  if (blockingStyleOverride != -1) {
    blockingStyle = blockingStyleOverride;
  } else {
    blockingStyle = eBlock;
  }

  Direction direction;
  if (directionOverride != -1) {
    direction = directionOverride;
  } else {
    direction = animation.Direction;
  }

  this.set_Visible(true);
  c.Animate(animation.View, animation.Loop, repeatStyle, blockingStyle, direction);

  #ifdef __SIGNAL_MODULE__
  Signal.Dispatch("character_animate", c.ID, animation.View, animation.Loop);
  #endif
}

void CharacterLayer::StopAnimating() {
  Character* c = this.GetCharacter();
  c.UnlockView();

  // Clear current animation tracking for this layer
  this.currentAnimationIndex = -1;

  #ifdef __SIGNAL_MODULE__
  Signal.Dispatch("character_stop_animation", c.ID);
  #endif
}

// --- CharacterLayer ---

Character* LayeredCharacter::get_Body() {
  CharacterLayer* layer = this.geti_Layers(0);
  return layer.GetCharacter();
}

Character* LayeredCharacter::get_Head() {
  CharacterLayer* layer = this.geti_Layers(1);
  return layer.GetCharacter();
}

CharacterAnimation* LayeredCharacter::get_CurrentAnimation() {
  // Returns the currently playing body animation, or null if no animation is active
  CharacterLayer* bodyLayer = this.GetLayerByName("body");
  if (bodyLayer != null) {
    return bodyLayer.get_CurrentAnimation();
  }
  return null;
}

int LayeredCharacter::get_Room() {
  Character* body = this.get_Body();
  return body.Room;
}

void LayeredCharacter::AddLayer(String name, Character* c) {
  CharacterLayer* layer = new CharacterLayer;
  layer.Init(name, c, this.Index);
  _layers[this.Index + this.LayerCount] = layer;
  this.LayerCount++;
}

void LayeredCharacter::Init(Character* body, Character* head, bool headlessBody) {
  head.Clickable = body.Clickable;
  head.ManualScaling = true;
  head.Solid = false;
  
  this.AddLayer("body", body);
  this.AddLayer("head", head);
  
  int index = _FindFreeCharacterIndex();
  // TODO: Warn/Error
  this.Index = index;
  _characters[this.Index] = this;
}

void CharacterLayer::AddAnimation(String animationName, int view, int loop, RepeatStyle repeatStyle, BlockingStyle blockingStyle, Direction direction, bool headless) {
  // blockingStyle is not used in storage, but kept for API consistency
  CharacterAnimation* animation = CharacterAnimation.Create(animationName, view, loop, repeatStyle, headless, direction);
  _animationNames[this.layeredCharacterIndex + this.AnimationCount] = animationName;
  _animations[this.layeredCharacterIndex + this.AnimationCount] = animation;
  this.AnimationCount++;
}

void LayeredCharacter::AddAnimation(String animationName, String layerName, int view, int loop, RepeatStyle repeatStyle, BlockingStyle blockingStyle, Direction direction, bool headless) {
  CharacterLayer* layer = this.GetLayerByName(layerName);
  if (layer == null) {
    return; // TODO warn or error in debug mode
  }
  
  // Check if animation name is already used in this layered character
  CharacterAnimation* existingAnimation = this.GetAnimationByName(animationName);
  if (existingAnimation != null) {
    // TODO warn or error in debug mode - animation name already exists
    return;
  }
  
  layer.AddAnimation(animationName, view, loop, repeatStyle, blockingStyle, direction, headless);
}

void LayeredCharacter::Say(String message) {
  Character* head = this.get_Head();
  head.Say(message);
  #ifdef __SIGNAL_MODULE__
  Signal.Dispatch("character_say", head.ID);
  #endif
}

void LayeredCharacter::SayBackground(String message) {
  Character* head = this.get_Head();
  head.SayBackground(message);
  #ifdef __SIGNAL_MODULE__
  Signal.Dispatch("character_say_background", head.ID);
  #endif
}

void LayeredCharacter::ChangeRoom(int room, int x, int y, CharacterDirection direction) {
  // Change room for body character first (this handles the main character logic)
  Character* body = this.get_Body();
  body.ChangeRoom(room, x, y, direction);
  
  // Change room for head character
  Character* head = this.get_Head();
  if (head.Room != room) {
    head.ChangeRoom(room, x, y, direction);
  }
  
  // Change room for any additional layers (starting from index 2, since 0=body, 1=head)
  for (int i = 2; i < this.LayerCount; i++) {
    CharacterLayer* layer = this.geti_Layers(i);
    if (layer != null) {
      Character* layerChar = layer.GetCharacter();
      if (layerChar.Room != room) {
        layerChar.ChangeRoom(room, x, y, direction);
      }
    }
  }
  
  #ifdef __SIGNAL_MODULE__
  Signal.Dispatch("character_change_room", body.ID, room);
  #endif
}

void LayeredCharacter::FaceCharacter(Character* toFace, BlockingStyle blockingStyle) {
  Character* body = this.get_Body();
  body.FaceCharacter(toFace, blockingStyle);
  
  #ifdef __SIGNAL_MODULE__
  Signal.Dispatch("character_face_character", body.ID, toFace.ID);
  #endif
}

void LayeredCharacter::FaceLocation(int x, int y, BlockingStyle blockingStyle) {
  Character* body = this.get_Body();
  body.FaceLocation(x, y, blockingStyle);
  
  #ifdef __SIGNAL_MODULE__
  Signal.Dispatch("character_face_location", body.ID, x, y);
  #endif
}

void LayeredCharacter::FaceObject(Object* toFace, BlockingStyle blockingStyle) {
  Character* body = this.get_Body();
  body.FaceObject(toFace, blockingStyle);
  
  #ifdef __SIGNAL_MODULE__
  Signal.Dispatch("character_face_object", body.ID, toFace.ID);
  #endif
}

void LayeredCharacter::FollowCharacter(Character* toFollow, int dist, int eagerness) {
  Character* body = this.get_Body();
  body.FollowCharacter(toFollow, dist, eagerness);
  
  #ifdef __SIGNAL_MODULE__
  Signal.Dispatch("character_follow_character", body.ID, toFollow.ID);
  #endif
}

void LayeredCharacter::Animate(String animationName, RepeatStyle repeatStyleOverride, BlockingStyle blockingStyle, Direction directionOverride) {
  // Check if animation exists
  CharacterAnimation* animation = this.GetAnimationByName(animationName);
  if (animation == null) {
    // TODO warn or error in debug mode - animation not found
    return;
  }
  
  // Find the layer that contains this animation and animate it
  for (int i = 0; i < this.LayerCount; i++) {
    CharacterLayer* layer = this.geti_Layers(i);
    if (layer.GetAnimationByName(animationName) != null) {
      layer.Animate(animationName, repeatStyleOverride, blockingStyle, directionOverride);
      return;
    }
  }
}

void LayeredCharacter::StopAnimating(String layerName) {
  CharacterLayer* layer = this.GetLayerByName(layerName);
  if (layer == null) {
    return; // TODO warn or error in debug mode 
  }

  layer.StopAnimating();
}

void LayeredCharacter::Update() {  
  Character* body = this.get_Body();
  if (body.Room != player.Room) return;
  
  Character* head = this.get_Head();
  
  if (head.Room != body.Room) {
    head.ChangeRoom(body.Room);
  }
  
  head.x = body.x;
  head.y = body.y;
  head.Scaling = body.Scaling;
  
  // Handle head visibility based on movement and current animation
  CharacterLayer* headLayer = this.GetLayerByName("head");
  if (headLayer != null) {
    if (body.Moving) {
      // When moving, always show the head layer
      headLayer.set_Visible(true);
    }
    else {
      // When not moving, check the current body animation's headless property
      CharacterAnimation* currentAnim = this.get_CurrentAnimation();
      if (currentAnim != null) {
        headLayer.set_Visible(currentAnim.Headless);
      }
      else {
        // Default to showing head if no current animation is tracked
        headLayer.set_Visible(true);
      }
    }
  }
  
  if (body.DiagonalLoops && body.Loop < 8 || body.Loop < 4) {
    // Check for animation locks
    head.FaceDirection(body.Loop, eNoBlock);
  }
}

static LayeredCharacter* LayeredCharacter::Create(Character* body, Character* head, bool headlessBody) {
  LayeredCharacter* lc = new LayeredCharacter();
  lc.Init(body, head, headlessBody);
  
  return lc;
}

static LayeredCharacter* LayeredCharacter::GetAtScreenXY(int x, int y) {
  // Check all LayeredCharacters
  for (int i = 0; i < _characters.Length; i++) {
    LayeredCharacter* lc = _characters[i];
    if (lc == null) continue;
    
    // Check all layers in this LayeredCharacter
    for (int j = 0; j < lc.LayerCount; j++) {
      CharacterLayer* layer = lc.geti_Layers(j);
      if (layer == null) continue;
      
      // Only check visible layers
      if (!layer.get_Visible()) continue;
      
      Character* layerChar = layer.GetCharacter();
      if (layerChar == null) continue;
      
      // Use AGS built-in Character.GetAtScreenXY to check if this character is at the coordinates
      Character* foundChar = Character.GetAtScreenXY(x, y);
      if (foundChar == layerChar) {
        return lc;
      }
    }
  }
  
  return null;
}

#endregion

#region Events

void _update_characters() {
  for (int i = 0; i < _characters.Length; i++) {
    if (_characters[i] != null) {
      _characters[i].Update();
    }
  }
}

void game_start() {
  _Init();
}

void on_event(EventType e, int data) {
  if (e == eEventEnterRoomBeforeFadein) {
    _update_characters();
  }
}

void late_repeatedly_execute_always() {
  if (IsGamePaused()) {
    return;
  }
  
  _update_characters();
}

#endregion