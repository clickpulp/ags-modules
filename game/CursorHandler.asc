// TERMS OF USE - AGS CURSOR HANDLER MODULE (ags-cursor-handler-module)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#region Definitions

#define GAMEPAD_MOUSE_DEFAULT_RATE_OF_MOTION 12

Point* _clickPoint;
int _rateOfMotion = GAMEPAD_MOUSE_DEFAULT_RATE_OF_MOTION;
bool _mouseMovedByAxis;
bool _walkAxisMoving;

#endregion // Definitions

#region Private

int _get_mouse_axis_delta(int value, float rateOfMotion) {
  int denominator = CONTROLLER_AXIS_RANGE_MAX - INPUT_AXIS_DEADZONE;
  
  if (value > 0) value -= INPUT_AXIS_DEADZONE;
  else {
    value += INPUT_AXIS_DEADZONE;
    denominator += 1; // Because for negative it's -32768 instead of -32767
  }

  int result = FloatToInt(
    Maths.RaiseToPower(IntToFloat(value) / IntToFloat(denominator), 2.0) * rateOfMotion,
    eRoundUp
  );
  if (value < 0) result = -result;
  
  return result;
}

void _track_axis() {
  // This determine the priority of moving the mouse.
  // If the right stick is moving, move the mouse cursor
  // If not, the mouse will be controlled by other means
  if (axisCursorX.IsMoving() || axisCursorY.IsMoving()) {
    int nextX = mouse.x;
    int nextY = mouse.y;
    
    float fRateOfMotion = IntToFloat(_rateOfMotion);
    
    if (axisCursorX.IsMoving()) nextX += _get_mouse_axis_delta(axisCursorX.Value, fRateOfMotion);
    if (axisCursorY.IsMoving()) nextY += _get_mouse_axis_delta(axisCursorY.Value, fRateOfMotion * (IntToFloat(Screen.Viewport.Height) / IntToFloat(Screen.Viewport.Width)));
    
    //System.Log(eLogDebug, "Next cursor %d %d, %d %d -> %d %d", axisCursorX.IsMoving(),  axisCursorY.IsMoving(),  axisCursorX.Value, axisCursorY.Value, _get_mouse_axis_delta(axisCursorX.Value), _get_mouse_axis_delta(axisCursorY.Value));
   
    Mouse.SetPosition(nextX, nextY);
    Point* roomPoint = Screen.ScreenToRoomPoint(nextX, nextY);
    _clickPoint.x = roomPoint.x;
    _clickPoint.y = roomPoint.y;
    _mouseMovedByAxis = true;
  }
  
  if (!_walkAxisMoving /*&& !is_object_closeup_visible()*/ && (axisLeftHorizontal.IsPressed || axisLeftVertical.IsPressed)) {
    _walkAxisMoving = true;
    _mouseMovedByAxis = (axisCursorX.IsMoving() || axisCursorY.IsMoving());
  }
  else if (_walkAxisMoving && axisLeftHorizontal.InDeadZone && axisLeftVertical.InDeadZone) { 
    _walkAxisMoving = false;
  }
}

#endregion // Private

#region Events

void game_start() {
  _clickPoint = new Point;
}

void repeatedly_execute_always() {
  readonly bool nextVisibility = IsInBlockingScript() && (/*SelectableGUI ||*/ _mouseMovedByAxis || player.ActiveInventory != null /*|| Dialog.IsDialogRunning()*/);
  
  if (mouse.Visible != nextVisibility) {
    mouse.Visible = nextVisibility;
    
    readonly bool canInteractWithInvCursor = mouse.Visible && player.on && player.ActiveInventory != null;
    
    if (!player.Clickable && canInteractWithInvCursor) {
      player.Clickable = true;
    } else if (player.Clickable && !canInteractWithInvCursor) { 
      player.Clickable = false;
    }
  }
  
  // Game.RunningBlockingScript 
  
  if (player.on && IsInterfaceEnabled() && !IsInBlockingScript() /* && !SelectableGUI*/ && player.ActiveInventory == null) {
    if (!_mouseMovedByAxis && _clickPoint.x == 0 && _clickPoint.y == 0) {
      //Mouse.SetPosition(player.x, player.GetCenterY());
    }
  }
  
  _track_axis();
}

#endregion // Events

