// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024-2025 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

InputMapping* inputUp;
InputMapping* inputDown;
InputMapping* inputLeft;
InputMapping* inputRight;
InputMapping* inputPrimaryButton;
InputMapping* inputSecondaryButton;
InputMapping* inputInvButton;
InputMapping* inputExamineButton;
InputMapping* inputSkipOrPauseButton;
InputMapping* inputCursorUp;
InputMapping* inputCursorDown;
InputMapping* inputCursorLeft;
InputMapping* inputCursorRight;
InputMapping* inputHintsButton;
InputMapping* inputPrevPage;
InputMapping* inputNextPage;

export
  inputUp, 
  inputDown, 
  inputLeft,
  inputRight, 
  inputPrimaryButton, 
  inputSecondaryButton, 
  inputInvButton, 
  inputExamineButton, 
  inputSkipOrPauseButton,
  inputHintsButton, 
  inputPrevPage,
  inputNextPage;

AxisTracker
  axisLeftHorizontal,
  axisLeftVertical,
  axisCursorX,
  axisCursorY;
  
export
  axisLeftHorizontal, 
  axisLeftVertical, 
  axisCursorX, 
  axisCursorY;
  
void _setup_right_side_buttons() {
  ControllerButton primary, secondary, inv, examine;
  
  primary = eControllerButtonA;
  secondary = eControllerButtonB;
  inv = eControllerButtonY;
  examine = eControllerButtonX;

  if (Input.ControllerConnected) {
    if (Input.ControllerType == eControllerTypeNintendo) {
      inv = eControllerButtonX;
      examine = eControllerButtonY;
    }
  }
  
  inputPrimaryButton.ClearMappings();
  inputPrimaryButton.AddKey(eKeyReturn);
  inputPrimaryButton.AddControllerButton(primary);
  inputPrimaryButton.AddControllerButton(eControllerButtonRightStick);
  inputPrimaryButton.AddControllerButton(eControllerButtonLeftStick);
  
  inputSecondaryButton.ClearMappings();
  inputSecondaryButton.AddKey(eKeyBackspace);
  inputSecondaryButton.AddControllerButton(secondary);
  
  inputInvButton.ClearMappings();
  inputInvButton.AddKey(eKeyTab);
  inputInvButton.AddControllerButton(inv);
  
  inputExamineButton.ClearMappings();
  inputExamineButton.AddKey(eKey0);
  inputExamineButton.AddControllerButton(examine);
}

void game_start() {
  inputUp = new InputMapping;
  inputUp.AddKey(eKeyW);
  inputUp.AddControllerButton(eControllerButtonDPadUp);
  inputUp.AddControllerPOV(ePOVUp);
  inputUp.AddControllerAxis(eInputMappingAxisLeftUp);
  
  inputDown = new InputMapping;
  inputDown.AddKey(eKeyS);
  inputDown.AddControllerButton(eControllerButtonDPadDown);
  inputDown.AddControllerPOV(ePOVDown);
  inputDown.AddControllerAxis(eInputMappingAxisLeftDown);
  
  inputLeft = new InputMapping;
  inputLeft.AddKey(eKeyA);
  inputLeft.AddControllerButton(eControllerButtonDPadLeft);
  inputLeft.AddControllerPOV(ePOVLeft);
  inputLeft.AddControllerAxis(eInputMappingAxisLeftLeft);
  
  inputRight = new InputMapping;
  inputRight.AddKey(eKeyD);
  inputRight.AddControllerButton(eControllerButtonDPadRight);
  inputRight.AddControllerPOV(ePOVRight);
  inputRight.AddControllerAxis(eInputMappingAxisLeftRight);
  
  inputPrimaryButton = new InputMapping;
  inputSecondaryButton = new InputMapping;
  inputInvButton = new InputMapping;
  inputExamineButton = new InputMapping;
  _setup_right_side_buttons();
  
  inputSkipOrPauseButton = new InputMapping;
  inputSkipOrPauseButton.AddKey(eKeyEscape);
  inputSkipOrPauseButton.AddControllerButton(eControllerButtonStart);
  
  inputCursorUp = new InputMapping;
  inputCursorUp.AddKey(eKeyUpArrow);
  inputCursorUp.AddControllerAxis(eInputMappingAxisRightUp);
  
  inputCursorDown = new InputMapping;
  inputCursorDown.AddKey(eKeyDownArrow);
  inputCursorDown.AddControllerAxis(eInputMappingAxisRightDown);
  
  inputCursorLeft = new InputMapping;
  inputCursorLeft.AddKey(eKeyLeftArrow);
  inputCursorLeft.AddControllerAxis(eInputMappingAxisRightLeft);
  
  inputCursorRight = new InputMapping;
  inputCursorRight.AddKey(eKeyRightArrow);
  inputCursorRight.AddControllerAxis(eInputMappingAxisRightRight);
  
  inputHintsButton = new InputMapping;
  inputHintsButton.AddKey(eKeySpace);
  inputHintsButton.AddControllerButton(eControllerButtonBack);
  
  inputPrevPage = new InputMapping;
  inputPrevPage.AddKey(eKeyZ);
  inputPrevPage.AddControllerButton(eControllerButtonLeftShoulder);
  
  inputNextPage = new InputMapping;
  inputNextPage.AddKey(eKeyX);
  inputNextPage.AddControllerButton(eControllerButtonRightShoulder);
}

void repeatedly_execute_always() {
  axisLeftHorizontal.Update(inputLeft, inputRight);
  axisLeftVertical.Update(inputUp, inputDown);
  axisCursorX.Update(inputCursorLeft, inputCursorRight);
  axisCursorY.Update(inputCursorUp, inputCursorDown);
  
  if (Signal.WasDispatched("controller_connected")) {
    _setup_right_side_buttons();
  }
}
