// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

InputMapping* inputUp;
InputMapping* inputDown;
InputMapping* inputLeft;
InputMapping* inputRight;
InputMapping* inputPrimaryButton;
InputMapping* inputSecondaryButton;
InputMapping* inputInvButton;
InputMapping* inputPauseSkipButton;

AxisTracker axisLeftHorizontal, axisLeftVertical;

export
  inputUp, 
  inputDown, 
  inputLeft,
  inputRight, 
  inputPrimaryButton, 
  inputSecondaryButton, 
  inputInvButton, 
  inputPauseSkipButton, 
  axisLeftHorizontal, 
  axisLeftVertical;

void game_start() {
  inputUp = new InputMapping;
  inputUp.AddKey(eKeyUpArrow);
  inputUp.AddControllerButton(eControllerButtonDPadUp);
  inputUp.AddControllerPOV(ePOVUp);
  inputUp.AddControllerAxis(eInputMappingAxisLeftUp);
  
  inputDown = new InputMapping;
  inputDown.AddKey(eKeyDownArrow);
  inputDown.AddControllerButton(eControllerButtonDPadDown);
  inputDown.AddControllerPOV(ePOVDown);
  inputDown.AddControllerAxis(eInputMappingAxisLeftDown);
  
  inputLeft = new InputMapping;
  inputLeft.AddKey(eKeyLeftArrow);
  inputLeft.AddControllerButton(eControllerButtonDPadLeft);
  inputLeft.AddControllerPOV(ePOVLeft);
  inputLeft.AddControllerAxis(eInputMappingAxisLeftLeft);
  
  inputRight = new InputMapping;
  inputRight.AddKey(eKeyRightArrow);
  inputRight.AddControllerButton(eControllerButtonDPadRight);
  inputRight.AddControllerPOV(ePOVRight);
  inputRight.AddControllerAxis(eInputMappingAxisLeftRight);
  
  inputPrimaryButton = new InputMapping;
  inputPrimaryButton.AddKey(eKeyReturn);
  inputPrimaryButton.AddControllerButton(eControllerButtonA);
  inputPrimaryButton.AddControllerButton(eControllerButtonRightStick);
  
  inputSecondaryButton = new InputMapping;
  inputSecondaryButton.AddKey(eKeyEscape);
  inputSecondaryButton.AddControllerButton(eControllerButtonB);
  
  inputInvButton = new InputMapping;
  inputInvButton.AddKey(eKeyTab);
  inputInvButton.AddControllerButton(eControllerButtonX);
  
  inputPauseSkipButton = new InputMapping;
  inputPauseSkipButton.AddKey(eKeyEscape);
  inputPauseSkipButton.AddControllerButton(eControllerButtonStart);
}

void repeatedly_execute_always() {
  axisLeftHorizontal.Update(inputLeft, inputRight);
  axisLeftVertical.Update(inputUp, inputDown);
}
