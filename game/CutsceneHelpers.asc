// TERMS OF USE - AGS CUTSCENE HELPERS MODULE (ags-cutscene-helpers-module)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

enum _AnimatableType {
  _eAnimatableCharacter,
  _eAnimatableObject,
  _eAnimatableButton,
};

managed struct _AnimatingElement {
  int ID;
  _AnimatableType type;
  Direction direction;
  int view;
  int loop;
  int frame;
  import void Skip();
  import bool IsAnimating();
  import ViewFrame* GetViewFrame();
  import Button* AsButton();
};

_AnimatingElement* _animatingCharacter;
_AnimatingElement* _animatingObj;
_AnimatingElement* _animatingButton;

#region Private
int _max_int(int min, int max) {
  if (max >= min) return max; return min;
}

int _generate_id_for_button(int guiID, int buttonID) { return guiID * 1000 + buttonID; }

int _get_gui_id(int id) { return id % 1000; }

int _get_button_id(int id) { return id % 1000; }

Button* _AnimatingElement::AsButton() {
  return gui[_get_gui_id(this.ID)].Controls[_get_button_id(this.ID)].AsButton;
}

ViewFrame* _AnimatingElement::GetViewFrame() {
  if (this.type == _eAnimatableCharacter) {
    return Game.GetViewFrame(character[this.ID].View, character[this.ID].Loop, character[this.ID].Frame);
  }
  if (this.type == _eAnimatableObject) {
    return Game.GetViewFrame(object[this.ID].View, object[this.ID].Loop, object[this.ID].Frame);
  }
  if (this.type == _eAnimatableButton) {
    Button* button = gui[_get_gui_id(this.ID)].Controls[_get_button_id(this.ID)].AsButton;
    return Game.GetViewFrame(button.View, button.Loop, button.Frame);
  }
}

bool _AnimatingElement::IsAnimating() {
  ViewFrame* vf = this.GetViewFrame();
  bool animating;
  if (this.type == _eAnimatableCharacter) animating = character[this.ID].Animating;
  if (this.type == _eAnimatableObject) animating = object[this.ID].Animating;
  if (this.type == _eAnimatableButton) {
    Button* button = this.AsButton();
    animating = button.Animating;
  }
  
  return animating && vf.View == this.view && vf.Loop == this.loop;
}

void _AnimatingElement::Skip() {
  if (!this.IsAnimating()) return;
  
  int frame = this.frame;
  if (this.direction == eForwards && frame == 0) frame = _max_int(frame, Game.GetFrameCountForLoop(this.view, this.loop) - 1);
  
  if (this.type == _eAnimatableCharacter) {
    // TODO: How do I stop a character blocking animation?
    character[i].Animate(this.loop, 0, eOnce, eBlock, this.direction, frame, 0);
  }
  else if (this.type == _eAnimatableObject) {
    if (object[this.ID].Animating) object[this.ID].StopAnimating();
    object[this.ID].Animate(this.loop, 0, eOnce, eBlock, this.direction, frame, 0);
  }
  else if (this.type == _eAnimatableButton) {
    Button* button = this.AsButton();
    // TODO: How do I stop a button blocking animation?
    button.Animate(this.view, this.loop, 0, eOnce, eBlock, this.direction, frame, 0);
  }
}

#endregion // Private

#region Public

void AnimateDuringCutscene(
  this Object*, int loop, int delay,
  RepeatStyle repeatStyle,
  BlockingStyle blockingStyle,
  Direction direction,
  int frame,
  int volume
) {
  
  if (Game.InSkippableCutscene && repeatStyle == eOnce && blockingStyle == eBlock) {
    if (_animatingObj == null) _animatingObj = new _AnimatingElement;
    _animatingObj.type = _eAnimatableButton;
    _animatingObj.ID = this.ID;
    _animatingObj.direction = direction;
    _animatingObj.view = this.View;
    _animatingObj.loop = loop;
    _animatingObj.frame = frame;
    
    if (Game.SkippingCutscene) {
      _animatingObj.Skip();
      _animatingObj = null;
      return;
    }
  }
  
  this.Animate(loop, delay, repeatStyle, blockingStyle, direction, frame, volume);
}

void AnimateDuringCutscene(
  this Button*, int loop, int delay,
  RepeatStyle repeatStyle,
  BlockingStyle blockingStyle,
  Direction direction ,
  int frame,
  int volume
) {
  if (Game.InSkippableCutscene && repeatStyle == eOnce && blockingStyle == eBlock) {
    if (_animatingButton == null) _animatingButton = new _AnimatingElement;
    _animatingButton.type = _eAnimatableButton;
    _animatingButton.ID = _generate_id_for_button(this.OwningGUI.ID, this.ID);
    _animatingButton.direction = direction;
    _animatingButton.view = this.View;
    _animatingButton.loop = loop;
    _animatingButton.frame = frame;
    
    if (Game.SkippingCutscene) {
      _animatingButton.Skip();
      _animatingButton = null;
      return;
    }
  }
  
  this.Animate(loop, delay, repeatStyle, blockingStyle, direction, frame, volume);
}

AudioChannel* PlayDuringCutscene(this AudioClip*, AudioPriority priority, RepeatStyle repeatStyle) {
  if (Game.SkippingCutscene && repeatStyle != eRepeat) return null;
  return this.Play(priority, repeatStyle); 
}

AudioChannel* PlayFromDuringCutscene(this AudioClip*, int position, AudioPriority priority, RepeatStyle repeatStyle) {
  if (Game.SkippingCutscene && repeatStyle != eRepeat) return null;
  return this.PlayFrom(position, priority, repeatStyle); 
}

#endregion // Public

#region Events

void repeatedly_execute_always() {
  if (Game.SkippingCutscene) {
    if (Speech.TextOverlay != null) Speech.TextOverlay.Remove();
    SkipWait();
  }
}

#endregion // Events
