// TERMS OF USE - AGS CUTSCENE HELPERS MODULE (ags-cutscene-helpers-module)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

enum _AnimatingElementType {
  eTypeCharacter,
  eTypeObject,
  eTypeButton,
};

managed struct _AnimatingElement {
  int ID;
  _AnimatingElementType type;
  Direction direction;
  int view;
  int loop;
  int frame;
  import void Skip();
  import bool IsAnimating();
};

_AnimatingElement* _animatingCharacter;
_AnimatingElement* _animatingObj;
_AnimatingElement* _animatingButton;

#region Private

void _set_object_view_to_last_frame(Object* obj, int loop, int frame, Direction direction) {
  if (direction == eForwards && frame == 0) frame = TweenMaths.MaxInt(frame, Game.GetFrameCountForLoop(obj.View, loop) - 1);
  
  if (obj.Animating) obj.StopAnimating();
  
  //System.Log(eLogDebug, "_set_object_view_to_last_frame %d %d %d", obj.View, loop, frame);
  obj.SetView(obj.View, loop, frame);
}

bool _AnimatingElement::IsAnimating() {
  return object[this.ID].Animating && object[this.ID].View == this.view && object[this.ID].Loop == this.loop;
}

void _AnimatingElement::Skip() {
  if (!this.IsAnimating()) return;
  
  readonly Object* obj = object[this.ID];
  
  _set_object_view_to_last_frame(obj, obj.Loop, this.frame, this.direction);
}

#endregion // Private

#region Public

void AnimateDuringCutscene(
  this Object*, int loop, int delay,
  RepeatStyle repeatStyle,
  BlockingStyle blockingStyle,
  Direction direction,
  int frame,
  int volume
) {
  
  if (Game.InSkippableCutscene && repeatStyle == eOnce && blockingStyle == eBlock) {
    _animatingObj = null;
    
    if (Game.SkippingCutscene) {
      _set_object_view_to_last_frame(this, loop, frame, direction);
      return;
    }
    
    _animatingObj = new _AnimatingElement;
    _animatingObj.type = eTypeObject;
    _animatingObj.ID = this.ID;
    _animatingObj.direction = direction;
    _animatingObj.view = this.View;
    _animatingObj.loop = loop;
    _animatingObj.frame = frame;
  }
  
  this.Animate(loop, delay, repeatStyle, blockingStyle, direction, frame, volume);
}

AudioChannel* PlayDuringCutscene(this AudioClip*, AudioPriority priority, RepeatStyle repeatStyle) {
  if (Game.SkippingCutscene && repeatStyle != eRepeat) return null;
  return this.Play(priority, repeatStyle); 
}

AudioChannel* PlayFromDuringCutscene(this AudioClip*, int position, AudioPriority priority, RepeatStyle repeatStyle) {
  if (Game.SkippingCutscene && repeatStyle != eRepeat) return null;
  return this.PlayFrom(position, priority, repeatStyle); 
}

#endregion // Public

#region Events

#endregion // Events
