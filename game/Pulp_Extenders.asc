// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#region Definitions

enum _DialogState {
  _eDialogNotRunning, 
  _eDialogRunning, 
  _eDialogEnded, 
};

managed struct _MouseHistoryItem extends Point {
  int cursorMode;
  int cursorGraphic;
  
  import void Init(int x, int y, int cursorMode, int cursorGraphic);
};

#endregion // Definitions

#region Variables

#define MOUSE_POSITION_STACK_SIZE 16

_DialogState _dialogState;
_MouseHistoryItem* _mousePositionStack[MOUSE_POSITION_STACK_SIZE];
int _mousePositionStackIndex = -1;

#endregion // Variables



#region Public

int GetCenterY(this Character*) {
  ViewFrame* vf = Game.GetViewFrame(this.View, this.Loop, this.Frame);
  if (vf == null) return this.y;
  
  return this.y - ((Game.SpriteHeight[vf.Graphic] * this.Scaling) / 100) / 2;
}

Point* Create(static Point, int x, int y) {
  Point* p = new Point;
  p.x = x;
  p.y = y;
  
  return p;
}

void SetPosition(this Point*, int x, int y) {
  this.x = x;
  this.y = y;
}

Point* GetPosition(this Mouse*) {
  return Point.Create(mouse.x, mouse.y);
}

Point* GetRoomPosition(this Mouse*) {
  return Screen.ScreenToRoomPoint(mouse.x, mouse.y);
}

void SetRoomPosition(this Mouse*, int x, int y) {
  Point* p = Screen.RoomToScreenPoint(x, y);
  this.SetPosition(p.x, p.y);
}

void _MouseHistoryItem::Init(int x, int y, int cursorMode, int cursorGraphic) {
  this.SetPosition(x, y);
  this.cursorMode = cursorMode;
  this.cursorGraphic = cursorGraphic;
}

void PushPosition(static Mouse) {
  if (_mousePositionStackIndex == MOUSE_POSITION_STACK_SIZE - 1) {
    AbortGame("Mouse.PushPosition: Position history full at %d saves", MOUSE_POSITION_STACK_SIZE);
    return;
  }
  
  _mousePositionStackIndex++;
  _MouseHistoryItem* mouseHistory = _mousePositionStack[_mousePositionStackIndex];
  if (mouseHistory == null) {
    mouseHistory = new _MouseHistoryItem;
    _mousePositionStack[_mousePositionStackIndex] = mouseHistory;
  }

  
  mouseHistory.Init(mouse.x, mouse.y, Mouse.Mode, Mouse.GetModeGraphic(Mouse.Mode));
}

void PopPosition(static Mouse) {
  if (_mousePositionStackIndex < 0) {
    System.Log(eLogWarn, "Tried to pop mouse position when there is no position history saved.");
    return;
  }
  
  _MouseHistoryItem* mouseHistory = _mousePositionStack[_mousePositionStackIndex];
  _mousePositionStackIndex--;

  Mouse.SetPosition(mouseHistory.x, mouseHistory.y);
  
#ifdef DEBUG
  System.Log(eLogDebug, "[Mouse] Pop (mode, graphic) %d %d -> %d %d", mouse.Mode, mouse.GetModeGraphic(mouse.Mode), mouseHistory.cursorMode, mouseHistory.cursorGraphic);
#endif

  if (Mouse.Mode != eModeUseinv) {
    Mouse.UseDefaultGraphic();
    if (Mouse.Mode != mouseHistory.cursorMode) Mouse.Mode = mouseHistory.cursorMode;
    if (Mouse.GetModeGraphic(Mouse.Mode) != mouseHistory.cursorGraphic) Mouse.ChangeModeGraphic(Mouse.Mode, mouseHistory.cursorGraphic);
  }
}

void PlaceOnControl(static Mouse, GUIControl* control) {
  if (control == null) {
    System.Log(eLogWarn, "[Mouse] PlaceOnControl: control arg is null");
    return;
  }
  
  GUI* parent = control.OwningGUI;
  int x = parent.X + control.X + control.Width/2;
  int y = parent.Y + control.Y;
  
  if (control.AsListBox != null) {
    y += 10;
  }
  else if (control.AsInvWindow != null) {
    x = parent.X + control.X + 2*control.AsInvWindow.ItemWidth/3;
    y += 2*control.AsInvWindow.ItemHeight/3;
  }
  /*
  else if (control.AsButton != null) {
    x += control.Width * 20 / 100;
    y += control.Height * 60 / 100;
  }
  */
  else {
    y += control.Height / 2;
  }
  
  Mouse.SetPosition(x, y);
}

void StartCustom(this Dialog*) {
  Mouse.PushPosition();
  _dialogState = _eDialogRunning;
  this.Start();
}

int FindFirstActiveOption(this Dialog*, bool reverseSearch) {
  int id;
  for (int i = 1; i <= this.OptionCount; i++) {
    if (reverseSearch) id = this.OptionCount - (i - 1);
    else id = i;
    
    if (this.GetOptionState(id) == eOptionOn && !String.IsNullOrEmpty(this.GetOptionText(id))) {
      return id;
    }
  }
  
  return -1;
}

bool IsDialogRunning(static Dialog) {
  return _dialogState == _eDialogRunning;
}

bool DidDialogEnd(static Dialog) {
  return _dialogState == _eDialogEnded;
}

void PauseGameOnce() {
  if (!IsGamePaused()) PauseGame();
}

#endregion // Public

#region Events

void repeatedly_execute() {
  if (_dialogState == _eDialogEnded) {
    Mouse.PopPosition();
    _dialogState = _eDialogNotRunning;
  }
  
  if (Dialog.IsDialogRunning()) {
    // First loop, mark dialog ended
    _dialogState = _eDialogEnded;
  }
}

#endregion // Events