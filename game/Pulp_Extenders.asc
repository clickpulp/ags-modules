// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#region Definitions

enum _DialogState {
  _eDialogNotRunning, 
  _eDialogRunning, 
  _eDialogEnded, 
};

#endregion // Definitions

#region Variables

_DialogState _dialogState;

#endregion // Variables

#region Public

int GetCenterY(this Character*) {
  ViewFrame* vf = Game.GetViewFrame(this.View, this.Loop, this.Frame);
  if (vf == null) return this.y;
  
  return this.y - ((Game.SpriteHeight[vf.Graphic] * this.Scaling) / 100) / 2;
}

Point* Create(static Point, int x, int y) {
  Point* p = new Point;
  p.x = x;
  p.y = y;
  
  return p;
}

Point* GetPosition(this Mouse*) {
  return Point.Create(mouse.x, mouse.y);
}

void PlaceOnControl(static Mouse, GUIControl* control) {
  if (control == null) {
    System.Log(eLogWarn, "[Mouse] PlaceOnControl: control arg is null");
    return;
  }
  
  GUI* parent = control.OwningGUI;
  int x = parent.X + control.X + control.Width/2;
  int y = parent.Y + control.Y;
  
  if (control.AsListBox != null) {
    y += 10;
  }
  else if (control.AsInvWindow != null) {
    x = parent.X + control.X + control.AsInvWindow.ItemWidth/2;
    y += control.AsInvWindow.ItemHeight/2;
  }
  else {
    y += control.Height / 2;
  }
  
  Mouse.SetPosition(x, y);
}

void StartCustom(this Dialog*) {
  //Mouse.xSavePosition();
  _dialogState = _eDialogRunning;
  this.Start();
}

bool IsDialogRunning(static Dialog) {
  return _dialogState == _eDialogRunning;
}

bool DidDialogEnd(static Dialog) {
  return _dialogState == _eDialogEnded;
}

#endregion // Public

#region Events

void repeatedly_execute() {
  if (_dialogState == _eDialogEnded) {
    // Mouse.xRestorePosition();
    // Second loop, mark dialog not running
    _dialogState = _eDialogNotRunning;
  }
  
  if (Dialog.IsDialogRunning()) {
    // First loop, mark dialog ended
    _dialogState = _eDialogEnded;
  }
}

#endregion // Events