// room script file

void _test_Int() {
  int expected;
  int actual;
  
  Test.Describe("Int: Set and Get Value");
  expected = 12345;
  PatchValues.SetInt("int_test", expected);
  actual = PatchValues.GetInt("int_test");
  ExpectIntToBe(actual, expected, "value");
  
  Test.Describe("Int: Get 0 when not set");
  expected = 0;
  actual = PatchValues.GetInt("int_test2");
  ExpectIntToBe(actual, expected, "value");
  
  Test.Describe("Int: Get default value when no value is set");
  expected = 7890;
  actual = PatchValues.GetInt("int_test2", 7890);
  ExpectIntToBe(actual, expected, "value");
  
  Test.Describe("Int: Previous key without default value is still 0");
  expected = 0;
  actual = PatchValues.GetInt("int_test2");
  ExpectIntToBe(actual, expected, "value");
  
  Test.Describe("Int: Get existing value with default value returns stored value");
  expected = 1212;
  PatchValues.SetInt("int_test3", expected);
  actual = PatchValues.GetInt("int_test3", 3434);
  ExpectIntToBe(actual, expected, "value");
  
  Test.Describe("Int: Remove value");
  PatchValues.SetInt("int_test4", 12345);
  PatchValues.Remove("int_test4");
  expected = 0;
  actual = PatchValues.GetInt("int_test4");
  ExpectIntToBe(actual, expected, "value");
  
  Test.Done();
  PatchValues.RemoveAll();
}

void _test_Float() {
  float expected;
  float actual;
  
  Test.Describe("Float: Set and Get Value");
  expected = 12.345;
  PatchValues.SetFloat("float_test", expected);
  actual = PatchValues.GetFloat("float_test");
  ExpectFloatToBe(actual, expected, "value");
  
  Test.Describe("Float: Get 0 when not set");
  expected = 0.0;
  actual = PatchValues.GetFloat("float_test2");
  ExpectFloatToBe(actual, expected, "value");
  
  Test.Describe("Float: Get default value when no value is set");
  expected = 78.901;
  actual = PatchValues.GetFloat("float_test2", 78.901);
  ExpectFloatToBe(actual, expected, "value");
  
  Test.Describe("Float: Previous key without default value is still 0");
  expected = 0.0;
  actual = PatchValues.GetFloat("float_test2");
  ExpectFloatToBe(actual, expected, "value");
  
  Test.Describe("Float: Get existing value with default value returns stored value");
  expected = 12.12;
  PatchValues.SetFloat("float_test3", expected);
  actual = PatchValues.GetFloat("float_test3", 343.4);
  ExpectFloatToBe(actual, expected, "value");
  
  Test.Describe("Float: Remove value");
  PatchValues.SetFloat("float_test4", 1.2345);
  PatchValues.Remove("float_test4");
  expected = 0.0;
  actual = PatchValues.GetFloat("float_test4");
  ExpectFloatToBe(actual, expected, "value");
  
  Test.Done();
  PatchValues.RemoveAll();
}

void _test_String() {
  String expected;
  String actual;
  
  Test.Describe("String: Set and Get Value");
  expected = "Hello";
  PatchValues.SetString("string_test", expected);
  actual = PatchValues.GetString("string_test");
  ExpectStringToBe(actual, expected, "value");
  
  Test.Describe("String: Get null value");
  expected = null;
  actual = PatchValues.GetString("string_test2");
  ExpectStringToBe(actual, expected, "value");
  
  Test.Describe("String: Get default value");
  expected = "Monkey";
  actual = PatchValues.GetString("string_test2", "Monkey");
  ExpectStringToBe(actual, expected, "value");
  
  Test.Describe("String: Previous key without default value is still null");
  expected = null;
  actual = PatchValues.GetString("string_test2");
  ExpectStringToBe(actual, expected, "value");
  
  Test.Describe("String: Clear value");
  PatchValues.SetString("string_test3", "something");
  PatchValues.SetString("string_test3", null);
  expected = null;
  actual = PatchValues.GetString("string_test3");
  ExpectStringToBe(actual, expected, "value");
  
  Test.Describe("String: Remove value");
  PatchValues.SetString("string_test4", "something");
  PatchValues.Remove("string_test4");
  expected = null;
  actual = PatchValues.GetString("string_test4");
  ExpectStringToBe(actual, expected, "value");
  
  Test.Done();
  PatchValues.RemoveAll();
}

function room_Load()
{

}

function room_AfterFadeIn()
{
  _test_Int();
  _test_Float();
  _test_String();
  QuitGame(0);
}
