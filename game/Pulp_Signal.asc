// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024-2025 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

managed struct _Signal {
  int values[3];
};

Dictionary* _dispatchedSignals;
bool _clearOnNextLoop;

#region Private

String _values_to_string(int value0, int value1, int value2) {
  return String.Format("%d,%d,%d", value0, value1, value2);
}

_Signal* _string_to_values(String values) {
  readonly char kSeparator = ',';
  _Signal* s = new _Signal;
  String valueString;
  int startIndex, valueIndex;
  bool isSeparator;
  
  for (int i = 0; i < values.Length; i++) {    
    if (kSeparator == values.Chars[i] || i == (values.Length - 1)) {
      valueString = values.Substring(startIndex, i - startIndex);
      s.values[valueIndex] = valueString.AsInt;
      startIndex = i + 1;
      valueIndex++;
    }
  }
  
  return s;
}

#endregion // Private

#region Public

static void Signal::Dispatch(const string name, int value0, int value1, int value2) {
  _dispatchedSignals.Set(name, _values_to_string(value0, value1, value2));
  System.Log(eLogInfo, "[Signal] Dispatch: %s, %d, %d, %d", name, value0, value1, value2);
}

static bool Signal::WasDispatched(const string name) {
  return _dispatchedSignals.Contains(name);
}

static int Signal::GetValue(const string name, int index) {
  if (!_dispatchedSignals.Contains(name) || index >= 3) {
    System.Log(eLogWarn, "[Signal] GetValue: Invalid Signal %s, returning 0");
    return 0;
  }
  
  _Signal* s = _string_to_values(_dispatchedSignals.Get(name));
  return s.values[index];
}

static bool Signal::WasDispatchedWithValue(const string name, int value, int index) {
  return Signal.WasDispatched(name) && Signal.GetValue(name, index) == value;
}

#endregion

#region Events

void game_start() {
  _dispatchedSignals = Dictionary.Create(eNonSorted, eCaseInsensitive);
}

void repeatedly_execute_always() {
  if (_clearOnNextLoop) {
    _dispatchedSignals.Clear();
    _clearOnNextLoop = false;
  }
}

void repeatedly_execute() {
  if (_dispatchedSignals.ItemCount > 0 && !_clearOnNextLoop) {
    _clearOnNextLoop = true;
  }
}

#endregion // Events