// TERMS OF USE - AGS INPUT MODULE (ags-input-module)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

InputMapping* _inputMappings[];
Controller* _controller0;

#region Private

void _detect_controller() {
  if (_controller0 == null && ControllerCount() > 0) {
    _controller0 = Controller.Open(0);
    System.Log(eLogInfo, "[InputMapping] Detected controller: %s, buttons: %d", _controller0.GetName(), _controller0.ButtonCount);
  }
  else if (_controller0 != null && ControllerCount() == 0) {
    _controller0 = null;
    System.Log(eLogInfo, "[InputMapping] Controller 0 disconnected.");
  }
}

int _find_free_input_index() {
  for (int i = 0; i < MAX_INPUTS; i++) {
    if (_inputMappings[i] == null) return i;
  }
  
  return -1;
}

ControllerAxis _get_axis_from_axis_direction(InputMappingAxisDirection d) {
  if (d == eInputMappingAxisLeftDown || d == eInputMappingAxisLeftUp)
    return eControllerAxisLeftY;
  if (d == eInputMappingAxisLeftLeft || d == eInputMappingAxisLeftRight)
    return eControllerAxisLeftX;
  if (d == eInputMappingAxisRightDown || d == eInputMappingAxisRightUp)
    return eControllerAxisRightY;
  if (d == eInputMappingAxisRightLeft || d == eInputMappingAxisRightRight)
    return eControllerAxisRightX;
  if (d == eInputMappingAxisTriggerLeft)
    return eControllerAxisTriggerLeft;
  if (d == eInputMappingAxisTriggerRight)
    return eControllerAxisTriggerRight;
    
  return eControllerAxisInvalid;
}

int _get_pressed_value_from_axis_direction(InputMappingAxisDirection d) {
  ControllerAxis axis = _get_axis_from_axis_direction(d);
  
  if (axis != eControllerAxisInvalid && _controller0 != null) {
    int pressedValue = _controller0.GetAxis(axis);
    if (
      (pressedValue > GAMEPAD_DEADZONE && (d == eInputMappingAxisLeftDown || d == eInputMappingAxisLeftRight || d == eInputMappingAxisRightDown || d == eInputMappingAxisRightRight || d == eInputMappingAxisTriggerLeft || d == eInputMappingAxisTriggerRight)) ||
      (pressedValue < -GAMEPAD_DEADZONE && (d == eInputMappingAxisLeftUp || d == eInputMappingAxisLeftLeft || d == eInputMappingAxisRightUp || d == eInputMappingAxisRightLeft)) 
    ) {
      return pressedValue;
    }  
  }
  
  return 0;
}

#endregion // Private


#region Public

void InputMapping::AddMapping(InputMappingType type, int value) {
  if (this._count >= MAX_MAPPINGS_PER_INPUT) {
    System.Log(eLogWarn, "[InputMapping] Could not add mapping. Too many mappings for input mapping %d", this._index); // TODO Better error
    return;
  }
  
  if (this._count == 0) {
    readonly int index = _find_free_input_index();
    
    if (index < 0) {
      AbortGame("[InputMapping] Too many input objects created. Increase MAX_INPUTS value.");
      return;
    }
    
    _inputMappings[index] = this;
    this._index = index;
    this.Enabled = true;
  }
  
  this._types[this._count] = type;
  this._values[this._count] = value;
  
  this._count++;
}

void InputMapping::AddKey(eKeyCode keyCode, bool triggerKeyPress) {
  this.AddMapping(eInputMappingKey, keyCode);
  if (triggerKeyPress) this.TriggerKeyPress = keyCode;
}

void InputMapping::AddMouseButton(MouseButton button, bool triggerClick) {
  // Check if there is a mouse button already
  this.AddMapping(eInputMappingMouseButton, button);
  if (triggerClick) this.TriggerMouseClick = button;
}

void InputMapping::AddControllerButton(ControllerButton button) {
  this.AddMapping(eInputMappingControllerButton, button);
}

void InputMapping::AddControllerAxis(InputMappingAxisDirection axisDirection) {
  this.HasAxisMapping = true;
  this.AddMapping(eInputMappingControllerAxis, axisDirection);
}

void InputMapping::AddControllerPOV(ControllerPOV pov) {
  this.AddMapping(eInputMappingControllerPOV, pov);
}

void InputMapping::Update() {
  if (this._count == 0 || !this.Enabled) return;
  
  int inputValue;
  
  this._pressedValue = 0;
  
  for (int i = 0; i < this._count; i++) {
    inputValue = this._values[i];
    
    switch (this._types[i]) {
      case eInputMappingKey:
        if (!this._pressedValue) this._pressedValue = IsKeyPressed(inputValue);
        break;
      
      case eInputMappingMouseButton:
        if (!this._pressedValue) this._pressedValue = Mouse.IsButtonDown(inputValue);
        break;
      
      case eInputMappingControllerButton:
        if (!this._pressedValue && _controller0 != null) this._pressedValue = _controller0.IsButtonDown(inputValue);
        break;
      
      case eInputMappingControllerPOV:
        if (!this._pressedValue && _controller0 != null) this._pressedValue = _controller0.GetPOV() & inputValue;
        break;
        
      case eInputMappingControllerAxis:
        if (!this._pressedValue && _controller0 != null) this._pressedValue = _get_pressed_value_from_axis_direction(inputValue);
        break;
    }
  }
  
  if (this._pressedValue != 0) {
    if (this.TriggerMouseClick) mouse.Click(this.TriggerMouseClick);
    else if (this.TriggerKeyPress) Game.SimulateKeyPress(this.TriggerKeyPress);
  }
  else if (this._wasPressedOnce) {
    this._wasPressedOnce = false;
  }
}

bool InputMapping::IsPressed(RepeatStyle style) {
  if (style == eOnce && this._wasPressedOnce) return false;
  
  this.Update();
  
  this._wasPressedOnce = this._pressedValue != 0; // TODO probably check for deadzone?
  
  return this._wasPressedOnce;
}

int InputMapping::GetAxis() {
  this.Update();
  
  return this._pressedValue;
}

void InputMapping::Delete() {
  if (this._count == 0) return;
  
  _inputMappings[this._index] = null;
  
  this._index = 0;
  this._count = 0;
  this.Enabled = false;
  this.TriggerMouseClick = false;
  this.HasAxisMapping = false;
}

#endregion // Public

#region Events

void game_start() {
  _inputMappings = new InputMapping[MAX_INPUTS];
  _detect_controller();
}

void repeatedly_execute_always() {  
  _detect_controller();
  
  for (int i = 0; i < MAX_INPUTS; i++) {
    if (_inputMappings[i] != null) {
      _inputMappings[i].Update();
    } 
  }
}

#endregion // Events

