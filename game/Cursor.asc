// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#region Definitions

#define CURSOR_DEFAULT_RATE_OF_MOTION 6
#define CURSOR_RATE_OF_MOTION_FACTOR (Screen.Width / 320)

Point* _cursorClickTarget;
int _rateOfMotion;
bool _cursorLocked;
bool _walkAxisMoving;

#endregion // Definitions

#region Public

bool get_Locked(static Cursor) {
  return _cursorLocked;
}

bool get_HasClickTarget(static Cursor) {
  return _cursorClickTarget.x > 0 || _cursorClickTarget.y > 0;
}

static void Cursor::SetClickTarget(Point* clickTarget, bool force) {
  if (force || _cursorClickTarget.x != clickTarget.x || _cursorClickTarget.y != clickTarget.y) {
    _cursorClickTarget.x = clickTarget.x;
    _cursorClickTarget.y = clickTarget.y;
    Mouse.SetPosition(_cursorClickTarget.x, _cursorClickTarget.y);
  }
}

static void Cursor::ClearClickTarget() {
  _cursorClickTarget.x = 0;
  _cursorClickTarget.y = 0;
}

static void Cursor::SetLocked(bool locked) {
  _cursorLocked = locked;
}

static void Cursor::SetMousePositionToClickTarget() {
  if (!GUIStack.GUICount > 0 && !IsGamePaused() && Cursor.HasClickTarget) {
    Point *screenPoint = Screen.RoomToScreenPoint(_cursorClickTarget.x, _cursorClickTarget.y);
    Mouse.SetPosition(screenPoint.x, screenPoint.y);
  }
}

#endregion // Public

#region Private

int _get_mouse_axis_delta(int value, float rateOfMotion) {
  int denominator = CONTROLLER_AXIS_RANGE_MAX - INPUT_AXIS_DEADZONE;
  
  if (value > 0) value -= INPUT_AXIS_DEADZONE;
  else {
    value += INPUT_AXIS_DEADZONE;
    denominator += 1; // Because for negative it's -32768 instead of -32767
  }

  int result = FloatToInt(
    Maths.RaiseToPower(IntToFloat(value) / IntToFloat(denominator), 2.0) * rateOfMotion,
    eRoundUp
  );
  if (value < 0) result = -result;
  
  return result;
}

void _track_axis() {
  // This determine the priority of moving the mouse.
  // If the right stick is moving, move the mouse cursor
  // If not, the mouse will be controlled by other means
  if (axisCursorX.IsMoving() || axisCursorY.IsMoving()) {
    readonly float fRateOfMotion = IntToFloat(_rateOfMotion);
    int nextX = mouse.x;
    int nextY = mouse.y;
    
    if (axisCursorX.IsMoving()) nextX += _get_mouse_axis_delta(axisCursorX.Value, fRateOfMotion);
    if (axisCursorY.IsMoving()) nextY += _get_mouse_axis_delta(axisCursorY.Value, fRateOfMotion * (IntToFloat(Screen.Height) / IntToFloat(Screen.Width)));
    
    //System.Log(eLogDebug, "Next cursor %d %d, %d %d -> %d %d", axisCursorX.IsMoving(),  axisCursorY.IsMoving(),  axisCursorX.Value, axisCursorY.Value, nextX, nextY);
   
    Cursor.SetClickTarget(Screen.ScreenToRoomPoint(nextX, nextY), true);
    Cursor.SetLocked(false);
  }
  
  if (!_walkAxisMoving && (axisLeftHorizontal.IsPressed || axisLeftVertical.IsPressed)) {
    _walkAxisMoving = true;
    Cursor.SetLocked(!axisCursorX.IsMoving() && !axisCursorY.IsMoving());
  }
  else if (_walkAxisMoving && axisLeftHorizontal.InDeadZone && axisLeftVertical.InDeadZone) { 
    _walkAxisMoving = false;
  }
}

#endregion // Private

#region Events

void game_start() {
  _cursorClickTarget = new Point;
  _rateOfMotion = CURSOR_DEFAULT_RATE_OF_MOTION * CURSOR_RATE_OF_MOTION_FACTOR;
  
  // Enable clickability only when inventory is cursor and player has use inv interaction
  player.Clickable = false;
}

void repeatedly_execute_always() {
  readonly bool nextVisibility = !IsInBlockingScript() && (GUIStack.ShowingGUI || !Cursor.Locked || player.ActiveInventory != null /*|| Dialog.IsDialogRunning()*/);
  
  if (mouse.Visible != nextVisibility) {
    mouse.Visible = nextVisibility;
    
    if (player.IsInteractionAvailable(eModeUseinv)) {
      readonly bool canInteractWithInvCursor = mouse.Visible && player.on && player.ActiveInventory != null;
      
      if (!player.Clickable && canInteractWithInvCursor) {
        player.Clickable = true;
      } else if (player.Clickable && !canInteractWithInvCursor) { 
        player.Clickable = false;
      }
    }
  }
  
  if (player.on && IsInterfaceEnabled() && !IsInBlockingScript() && !GUIStack.ShowingGUI && player.ActiveInventory == null) {
    if (Cursor.Locked && !Cursor.HasClickTarget) {
      Mouse.SetPosition(player.x, player.GetCenterY());
    }
  }
  
  _track_axis();
}

#endregion // Events

