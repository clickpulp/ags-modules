#define TOOLTIP_MARGIN 20

Overlay* _overlay;

void Tooltip::Remove() {
  if (_overlay != null && _overlay.Valid) {
    _overlay.StopAllTweens();
    _overlay.Remove();
    _overlay = null;
  }
}

static Tooltip* Tooltip::Create(int screenX, int screenY, const string text) {
  bool isVisible;
  if (_overlay != null) {
    isVisible = true;
    _overlay.SetText(Screen.Width / 2 - TOOLTIP_MARGIN*2, pulpGlobals.TooltipFont, 16, text);
  }
  else {
    _overlay = Overlay.CreateTextual(0, 0, Screen.Width / 2 - TOOLTIP_MARGIN*2, pulpGlobals.TooltipFont, 54468, text);
    _overlay.ZOrder = 32767;
  }
  
  int yMarginTop = TOOLTIP_MARGIN;
  
  if (pulpGlobals.InventoryGUI != null && pulpGlobals.InventoryGUI.Visible) {
    // Assumes that the inventory GUI is a top bar
    yMarginTop += pulpGlobals.InventoryGUI.Height;
  }
  
  _overlay.X = TweenMaths.ClampInt(screenX - _overlay.Width/2, TOOLTIP_MARGIN, Screen.Width - TOOLTIP_MARGIN - _overlay.Width);
  _overlay.Y = TweenMaths.ClampInt(screenY - _overlay.Height/2, yMarginTop, Screen.Height - TOOLTIP_MARGIN - _overlay.Height);
  
  if (GUIStack.TopGUI != null) _overlay.ZOrder = GUIStack.TopGUI.ZOrder;
  else _overlay.ZOrder = 0;
  if (isVisible) {
    _overlay.Transparency = 0;
  }
  else {
    _overlay.Transparency = 100;
    _overlay.TweenFadeIn(0.25, eEaseLinearTween, eNoBlockTween);
  }
  
  return new Tooltip;
}
