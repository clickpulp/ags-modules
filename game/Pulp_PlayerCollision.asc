// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#region Definitions

#define MAX_COLLIDERS 8

struct ColliderInfo {
  float distance;
  int index;
  int angle;
  CharacterDirection direction;
  int weight;
};

#endregion // Definitions

#region Variables

DynamicSprite* _collisionSprite;
Overlay* _collisionOverlay;
ViewFrame* _playerViewFrame;
Rect* _playerBounds;
ColliderInfo _colliderInfo[MAX_COLLIDERS];
int _playerScaling = -1;

#endregion

void _swap_collider_info(int indexA, int indexB) {
  ColliderInfo temp;
  temp.distance = _colliderInfo[indexA].distance;
  temp.index = _colliderInfo[indexA].index;
  temp.angle = _colliderInfo[indexA].angle;
  temp.direction = _colliderInfo[indexA].direction;
  temp.weight = _colliderInfo[indexA].weight;
  
  _colliderInfo[indexA].distance = _colliderInfo[indexB].distance;
  _colliderInfo[indexA].index = _colliderInfo[indexB].index;
  _colliderInfo[indexA].angle = _colliderInfo[indexB].angle;
  _colliderInfo[indexA].direction = _colliderInfo[indexB].direction;
  _colliderInfo[indexA].weight = _colliderInfo[indexB].weight;
  
  _colliderInfo[indexB].distance = temp.distance;
  _colliderInfo[indexB].index = temp.index;
  _colliderInfo[indexB].angle = temp.angle;
  _colliderInfo[indexB].direction = temp.direction;
  _colliderInfo[indexB].weight = temp.weight;
}

int _get_angle(int x0, int y0, int x1, int y1) {
  int angle = FloatToInt(Maths.RadiansToDegrees(Maths.ArcTan2(IntToFloat(y1 - y0),  IntToFloat(x1 - x0))) + 360.0, eRoundNearest) % 360;
  if (angle > 315) return angle - 360;
  else return angle;
}

CharacterDirection _get_dir_from_angle(int angle) {  
  int nAngle = FloatToInt(IntToFloat(angle) * 8.0 / 360.0, eRoundNearest);
  
  switch (nAngle) {
    case 1: return eDirectionUpRight;
    case 2: return eDirectionUp;
    case 3: return eDirectionUpLeft;
    case 4: return eDirectionLeft;
    case 5: return eDirectionDownLeft;
    case 6: return eDirectionDown;
    case 7: return eDirectionDownRight;
  }
  
  return eDirectionRight;
}

int _get_angle_from_dir(CharacterDirection dir) {
  switch (dir) {
    case eDirectionRight: return 0;
    case eDirectionDownRight: return 45;
    case eDirectionDown: return 90;
    case eDirectionDownLeft: return 135;
    case eDirectionLeft: return 180;
    case eDirectionUpLeft: return 225;
    case eDirectionUp: return 270;
    case eDirectionUpRight: return 315;
  }
  
  return 0;
}

void _check_collision(bool draw) {  
  readonly CharacterDirection dir = player.Loop;
  readonly float roomDistance = TweenMaths.GetDistance(0, 0, Room.Width, Room.Height);
  readonly int pcx = player.x;
  readonly int pcy = _playerBounds.top + _playerBounds.Height/2;
 
  Rect* bounds;
  float maxDistance = 1.0;
  int maxAngle = 1;
  int numColliders, cx, cy, i, flags, smallestWeightIdx;
  
  // Identify
  // TODO: Fix hotspot 0 (no hotspot) skip
  for (i = 1; i < RoomIndex.EntityCount && numColliders < MAX_COLLIDERS; i++) {
    if (!RoomIndex.IsInitialized(i) || RoomIndex.GetFlags(i) == eEntityFlagNone) {
      continue;
    }
    else {
      flags = RoomIndex.GetFlags(i);
      if (!RoomIndex.IsCharacter(i) && !(flags & eEntityFlagDoor == eEntityFlagDoor) && !(flags & eEntityFlagExit == eEntityFlagExit) && !(flags & eEntityFlagSign == eEntityFlagExit)) {
        continue;
      }
    }
    
    bounds = RoomIndex.GetBounds(i);
   
    if (
      _playerBounds.left < bounds.right &&
      _playerBounds.right > bounds.left &&
      _playerBounds.top < bounds.bottom &&
      _playerBounds.bottom > bounds.top
    ) {
      cx = bounds.left + bounds.Width/2;
      cy = bounds.top + bounds.Height/2;
      
      _colliderInfo[numColliders].index = i;
      _colliderInfo[numColliders].distance = TweenMaths.GetDistance(pcx, pcy, cx, cy);
      _colliderInfo[numColliders].angle = _get_angle(pcx, pcy, cx, cy);
      _colliderInfo[numColliders].direction = _get_dir_from_angle(_colliderInfo[numColliders].angle);
      
      if (_colliderInfo[numColliders].distance > maxDistance) maxDistance = _colliderInfo[numColliders].distance;
      if (_colliderInfo[numColliders].angle > maxAngle) maxAngle = _colliderInfo[numColliders].angle;
      
      numColliders++;
    }
  }
  
  DrawingSurface* surface;
  Rect* lineRect;
  if (draw) {
    surface = _collisionSprite.GetDrawingSurface();
    surface.Clear();
    surface.DrawingColor = 15;
  }
  
  RoomMarkers.ClearAll();
  Cursor.ClearClickTarget();

  if (numColliders == 0 || !Cursor.Locked || player.ActiveInventory != null) {
    if (draw) {
      surface.Release();
    }
    return;
  }
  
  // Calc weight for all colliders
  for (i = 0; i < numColliders; i++) {
    int angleDelta = FloatToInt(TweenMaths.Abs(IntToFloat(_get_angle_from_dir(dir) - _colliderInfo[i].angle) * 10.0), eRoundNearest) / maxAngle;
    int dirDelta = FloatToInt(_colliderInfo[i].distance * 10.0 / maxDistance, eRoundNearest);
    // Removed angle delta from weight...
    //_colliderInfo[i].weight = angleDelta + dirDelta;
    _colliderInfo[i].weight = dirDelta;
    //System.Log(eLogInfo, "%d angle = %d, %d %d", _colliderInfo[i].index, angleDelta, _colliderInfo[i].angle, _get_angle_from_dir(dir));
    
    // Record the index for the highest weighted collider
    if (i > 0 && _colliderInfo[smallestWeightIdx].weight > _colliderInfo[i].weight) {
      smallestWeightIdx = i;
    }
  }
  
  // cheapSort: Swap the first collider, the one we care about the most
  if (smallestWeightIdx > 0) {
    _swap_collider_info(0, smallestWeightIdx);
  }
  
  Hotspot* hs;
  ViewFrame* vf;
  RoomMarkerState markerState;
  int idx, graphic, view;
  
  for (i = 0; i < numColliders; i++) {
    idx = _colliderInfo[i].index;
    
    bounds = RoomIndex.GetBounds(idx);
    
    cx = bounds.left + bounds.Width/2;
    cy = bounds.top + bounds.Height/2;
    
    if (i == 0) {
      markerState = eRoomMarkerStateActive;
      Cursor.SetClickTarget(Point.Create(cx, cy));
    }
    else markerState = eRoomMarkerStateInactive;
    
    graphic = Mouse.GetModeGraphic(mouse.Mode);
    
    RoomMarkers.Place(idx, cx, cy, graphic, markerState);
    
    if (draw) {
      lineRect = Rect.FromPoints(
        Screen.RoomToScreenPoint(pcx, pcy),
        Screen.RoomToScreenPoint(cx, cy)
      );
      surface.DrawLine(lineRect.left, lineRect.top, lineRect.right, lineRect.bottom);
    } else break;
  }
  
  if (draw) {
    surface.Release();
    _collisionOverlay.Transparency = 0;
  }
}

void _update_player_collider() {
  if (
    _playerScaling != player.Scaling ||
    _playerViewFrame == null ||
    _playerViewFrame.View != player.View ||
    _playerViewFrame.Loop != player.Loop || 
    _playerViewFrame.Frame != player.Frame
  ) {
    _playerViewFrame = Game.GetViewFrame(player.View, player.Loop, player.Frame);
    _playerScaling = player.Scaling;
    
    readonly int w = Game.SpriteWidth[_playerViewFrame.Graphic] * _playerScaling / 100;
    readonly int kPadding = 5;
    int h = Game.SpriteHeight[_playerViewFrame.Graphic] * _playerScaling / 100;
    //h = (h*50)/100; // 50% of the height
    
    _playerBounds.left = player.x - w / 2 - kPadding;
    _playerBounds.right = player.x + w / 2 + kPadding;
    _playerBounds.top = player.y - h - kPadding;
    _playerBounds.bottom = player.y + kPadding;
  }
}

#region Events

void game_start() {
  _playerBounds = new Rect;
#ifdef DEBUG
  _collisionSprite = DynamicSprite.Create(Screen.Width, Screen.Height,  true);
#endif
}

void repeatedly_execute_always() {
  if (GUIStack.ShowingGUI || Game.SkippingCutscene)
    return;
  
  if (Dialog.IsDialogRunning() || IsInBlockingScript()) {
    RoomMarkers.ClearAll();
  }
}

void repeatedly_execute() {
  if (GUIStack.ShowingGUI) return;

#ifdef DEBUG
  readonly bool draw = IsKeyPressed(eKey9);
#else
  readonly bool draw = false;
#endif
  
  _update_player_collider();
  _check_collision(draw);
  
#ifdef DEBUG
  if (draw) {
    readonly DrawingSurface* s = _collisionSprite.GetDrawingSurface();
    readonly int lineThickness = Screen.Width / 320;
    readonly Rect* screenBounds = _playerBounds.ToScreenRect();
    s.DrawingColor = 12;
    s.DrawLine(screenBounds.left, screenBounds.top, screenBounds.right, screenBounds.top, lineThickness);
    s.DrawLine(screenBounds.right, screenBounds.top, screenBounds.right, screenBounds.bottom, lineThickness);
    s.DrawLine(screenBounds.right, screenBounds.bottom, screenBounds.left, screenBounds.bottom, lineThickness);
    s.DrawLine(screenBounds.left, screenBounds.top, screenBounds.left, screenBounds.bottom, lineThickness);
    s.Release();
    _collisionOverlay.Transparency = 0;
  }
#endif
}

void on_event(EventType type, int data) {
  switch (type) {
    case eEventEnterRoomBeforeFadein:      
      _collisionOverlay = Overlay.CreateGraphical(0, 0, _collisionSprite.Graphic);
      _collisionOverlay.Transparency = 100;
      break;
      
    case eEventLeaveRoomAfterFadeout:
      if (_collisionOverlay != null && _collisionOverlay.Valid) {
        _collisionOverlay.Remove();
        _collisionOverlay = null;
      }
      break;
  }
}

#endregion // Events
