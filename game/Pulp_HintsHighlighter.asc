// TERMS OF USE - HINTS HIGHLIGHTER MODULE (hints-highlighter-module)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
// Portions copyright (c) 2018 Artium Nihamkin (artium@nihamkin.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


/** 
  * Which shape to use for hints. Can be circle, rectangle or mixed as 
  * define by the HintShapeType enum.
  * Mixed will a separate decision for each hotspot whether to use 
  * circle or to use rectangle. The decision will be based on the ratio of 
  * height to width defined separately.
  */
#define HINT_SHAPE_TO_USE eHintCircle

/**
  * If eHintMixed is selected, this will be the ratio used for deciding
  * which shape to use.
  * If the width/height or height/width of the area is larger than this
  * defined value, then a rectangle will be used, otherwise, a circle. 
  */
#define HINT_SHAPE_MIXED_RATIO 1.5

/**
 * The width of the highlight shape
 */
#define BORDER_WIDTH 1

/**
 * Padding around objects/hotspots/characters
 */
#define PADDING 3

/** 
  * The color of the highlight shape
  */
#define BORDER_COLOR 14


/**
 * To prevent highlights that are too small, it is possible to define minimal
 * size. If the shape is smaller that that size, it's size will be increased.
 * For circles, size is the diameter.
 * For rectangles, size is the edge's length (each dimension increased separately)
 */
#define MINIMAL_SHAPE_SIZE 3


enum HintShapeType {
   eHintCircle,
   eHintRectangle, 
   eHintMixed
};

// I N T E R N A L  D A T A
////////////////////////////

DynamicSprite* _sprite;
Overlay* _overlay;
String _kPropertyHintX;
String _kPropertyHintY;

bool hintsEnabled = true;
bool lastPassCalculated = false;
bool hintsVisible = false;

#region Extenders

Point* GetHintPoint(this Hotspot*) {
  return Point.Create(this.GetProperty(_kPropertyHintX), this.GetProperty(_kPropertyHintY));
}

Point* GetHintPoint(this Character*) {
  int hintX = this.GetProperty(_kPropertyHintX);
  int hintY = this.GetProperty(_kPropertyHintY);
  
  if (hintX != 0 || hintY != 0) {
    readonly ViewFrame* vf = Game.GetViewFrame(this.View, this.Loop, this.Frame);
    readonly int scaling = this.Scaling;
    
    if (hintX != 0) hintX = (this.x - ((Game.SpriteWidth[vf.Graphic] / 2) * scaling / 100)) + (hintX * scaling / 100);
    if (hintY != 0) hintY = (this.y - (Game.SpriteHeight[vf.Graphic] * scaling / 100)) + (hintY * scaling / 100);
  }
  
  return Point.Create(hintX, hintY);
}

Point* GetHintPoint(this Object*) {
  return Point.Create(this.GetProperty(_kPropertyHintX), this.GetProperty(_kPropertyHintY));
}

#endregion // Extenders

// I N T E R N A L  F U N C T I O N S
/////////////////////////////////////

/**
 * This is an internal method. It draws a rectangle around the hotspot.
 * It must be run in the context of the CalculateHintsForRoom after 
 * hintsData was calculated.
 * @surface The surface on which to draw the higlight.
 * @hotspotID The id of the hotspot to draw a rectangle for.
 */
function DrawRectangle(DrawingSurface* surface,  int hotspotID) {
  Rect* bounds = RoomIndex.GetBounds(hotspotID);
  
  int h = bounds.Height;
  int w = bounds.Width;
  
  int left   = bounds.left;
  int right  = bounds.right;
  int top    = bounds.top;
  int bottom = bounds.bottom;
  
  top -= PADDING;
  bottom += PADDING;
  left -= PADDING;
  right += PADDING;
  
  // Increase edges' length if too small
  if (h < MINIMAL_SHAPE_SIZE) {
    top    -= (MINIMAL_SHAPE_SIZE - h) / 2;
    bottom += (MINIMAL_SHAPE_SIZE - h) / 2;
    h = MINIMAL_SHAPE_SIZE;
    
  }

  if (w < MINIMAL_SHAPE_SIZE) {
    left  -= (MINIMAL_SHAPE_SIZE - w) / 2;
    right += (MINIMAL_SHAPE_SIZE - w) / 2;
    w = MINIMAL_SHAPE_SIZE;
  }

  // Draw clockwise
  surface.DrawingColor = BORDER_COLOR;
  
  // Top
  surface.DrawLine(
    left,     top,  
    right,    top, 
    BORDER_WIDTH);
  
  // Right
  surface.DrawLine(
    right,     top,  
    right    , bottom, 
    BORDER_WIDTH);
    
  // Bottom
  surface.DrawLine(
    right,     bottom,  
    left,      bottom, 
    BORDER_WIDTH);
    
  // Left
  surface.DrawLine(
    left,     bottom,  
    left    , top, 
    BORDER_WIDTH);
}

function DrawSprite(DrawingSurface* surface, int index, int graphic) {
  Rect* bounds = RoomIndex.GetBounds(index);
  int h = bounds.Height;
  int w = bounds.Width;
  Point* hintPoint;
  int x, y;
  bool isHotspot = RoomIndex.IsHotspot(index);
  
  if (isHotspot)
    hintPoint = hotspot[index].GetHintPoint();
  
  if (isHotspot && hintPoint.x > 0)
    x = hintPoint.x;
  else
    x = bounds.left + w / 2;
    
  if (isHotspot && hintPoint.y > 0)
    y = hintPoint.y;
  else
    y = bounds.top + h / 2;
  
  x = TweenMaths.ClampInt(x - Game.SpriteWidth[graphic]/2, 10, Room.Width - Game.SpriteWidth[graphic] - 10);
  y = TweenMaths.ClampInt(y - Game.SpriteHeight[graphic]/2, 10, Room.Height - Game.SpriteHeight[graphic] - 10);
  
  surface.DrawImage(x, y, graphic); // 0 for no tranparency
}

/**
 * This is an internal method. It draws a rectangle around the hotspot.
 * It must be run in the context of the CalculateHintsForRoom after 
 * hintsData was calculated.
 * @surface The surface on which to draw the higlight.
 * @hotspotID The id of the hotspot/character/object to draw a circle for.
 */
function DrawCircle(DrawingSurface* surface,  int hotspotID)
{  
  Point* hintPoint;
  Rect* bounds = RoomIndex.GetBounds(hotspotID);
  int h = bounds.Height;
  int w = bounds.Width;
  
  int radius;
  
  if (w > h) {
    radius = w / 2;
  } else {
    radius = h / 2;
  }
  
  radius = 3;
  
  if (2 * radius < MINIMAL_SHAPE_SIZE) {
    radius = 3;
  }
  
  // Prepare the drawing of the highlight on a separate sprite.
  
  // Sprite big enough to draw a circle of that radius
  DynamicSprite* tempSprite = DynamicSprite.Create(2*radius + 1, 2*radius + 1, true);
  DrawingSurface* tempSurface = tempSprite.GetDrawingSurface();
      
  tempSurface.DrawingColor = 0;
  tempSurface.DrawCircle(radius,  radius,  radius);
  tempSurface.DrawingColor = 65535;
  tempSurface.DrawCircle(radius,  radius,  radius - BORDER_WIDTH);
  tempSurface.Release();
  
  // Draw the prepared sprite onto the surface that contains all the highlights.
  int centerX = 1, centerY = 1, index;
  
  if (RoomIndex.IsHotspot(hotspotID)) {
    index = RoomIndex.ToHotspotIndex(hotspotID);
    hintPoint = hotspot[index].GetHintPoint();
  }
  else if (RoomIndex.IsCharacter(hotspotID)) {
    index = RoomIndex.ToCharacterIndex(hotspotID);
    hintPoint = character[index].GetHintPoint();
  }
  else if (RoomIndex.IsObject(hotspotID)) {
    index = RoomIndex.ToObjectIndex(hotspotID);
    hintPoint = object[index].GetHintPoint();
  }
  
  if (hintPoint != null) {
    if (hintPoint.x > 0) centerX = hintPoint.x;
    if (hintPoint.y > 0) centerY = hintPoint.y;
  }
  
  if (centerX == 1) centerX = bounds.left + w / 2;
  if (centerY == 1) centerY = bounds.top  + h / 2;
  
  surface.DrawImage(
    centerX - radius, 
    centerY - radius, 
    tempSprite.Graphic,
    10); // 0 for no tranparency
  tempSprite.Delete();
}

static function HintsHighlighter::CalculateHintsForRoom()
{
  readonly String propExit = "Exit";
  readonly String propIsDoor = "IsDoor";
  
  Rect* bounds;
  
  // Construct the sprite that will later be used as overlay of all the hints
  readonly DrawingSurface* surface = _sprite.GetDrawingSurface();
  surface.Clear();
  
  float h, w;
  int flags, graphic;
 
#ifdef DEBUG
  String hintType;
  String hintName;
  int hintNumber;
  
  System.Log(eLogDebug, "Hints for Room %d", player.Room);
#endif
      
  for (int x = 0; x < RoomIndex.EntityCount; x++) {
    if (!RoomIndex.IsInitialized(x)) continue;
    
    bounds = null;
    graphic = 0;
    flags = RoomIndex.GetFlags(x);
    
    if (HINT_SHAPE_TO_USE == eHintRectangle) {
      DrawRectangle(surface, x);
    }
    else if (HINT_SHAPE_TO_USE == eHintCircle) {
      if (RoomIndex.IsHotspot(x) && (flags & eEntityFlagExit == eEntityFlagExit || flags & eEntityFlagDoor == eEntityFlagDoor)) {
        graphic = 0; // TODO: Set Exit Graphic
      }
      
      if (graphic) {
        DrawSprite(surface, x, graphic);
      }
      else {
        DrawCircle(surface, x);
      }
    }
    else if (HINT_SHAPE_TO_USE == eHintMixed) {
      bounds = RoomIndex.GetBounds(x);
      
      h = IntToFloat(bounds.Width);
      w = IntToFloat(bounds.Height);

      if (h == 0.0) h = 1.0;
      if (w == 0.0) w = 1.0;
      
      if (h/w > HINT_SHAPE_MIXED_RATIO || w/h > HINT_SHAPE_MIXED_RATIO) {
        DrawRectangle(surface,  x);
      }
      else {
        DrawCircle(surface,  x);
      }
      
    }
    else {
      AbortGame("Invalid value for HINT_SHAPE_TO_USE");
    }
      
#ifdef DEBUG
    if (RoomIndex.IsHotspot(x)) {
      hintNumber = RoomIndex.ToHotspotIndex(x);
      hintType = "hotspot";
      hintName = String.Format("%s (\"%s\")", hotspot[x].ScriptName, hotspot[x].Name);
    }
    else if (RoomIndex.IsCharacter(x)) {
      hintNumber = RoomIndex.ToCharacterIndex(x);
      hintType = "character";
      hintName = String.Format("%s (\"%s\")", character[hintNumber].ScriptName, character[hintNumber].Name);
    }
    else {
      hintNumber = RoomIndex.ToObjectIndex(x);
      hintType = "object";
      hintName = String.Format("%s (\"%s\")", object[hintNumber].ScriptName, object[hintNumber].Name);
    }
    
    if (bounds == null) bounds = RoomIndex.GetBounds(x);
    System.Log(eLogDebug, "Hint %d is %s %d %s at %d,%d, %d,%d", x, hintType, hintNumber, hintName, bounds.left, bounds.top, bounds.right, bounds.bottom);
#endif
  }
  
  surface.Release();
}

static function HintsHighlighter::DisplayHints()
{
  if (_sprite == null || !hintsEnabled) return;
  _overlay.StopAllTweens();
  _overlay.Transparency = 100;
  _overlay.TweenFadeIn(0.2, eEaseLinearTween, eNoBlockTween);
}
  
static function HintsHighlighter::HideHints()
{
  _overlay.StopAllTweens();
  _overlay.TweenFadeOut(0.2, eEaseLinearTween, eNoBlockTween);
}

static function HintsHighlighter::EnableHints()
{
  hintsEnabled = true;
}

static function HintsHighlighter::DisableHints()
{
  HintsHighlighter.HideHints();
  hintsEnabled = false;
}

static bool HintsHighlighter::IsShowingHints() {
  return hintsVisible;
}

void game_start() { 
  _kPropertyHintX = "HintX";
  _kPropertyHintY = "HintY";
}

void repeatedly_execute() {
  if (GUIStack.ShowingGUI || IsGamePaused() || !IsInterfaceEnabled()) return;
  
  readonly bool toggle = inputHintsButton.IsPressed(eOnce) || Signal.WasDispatched("toggle_hints");
  
  // Calculate hints once, when the button is pressed. If overlay is already displayed, do not recalculate.
  if (!hintsVisible && toggle) {

    if (lastPassCalculated == false) {
      HintsHighlighter.CalculateHintsForRoom();
      lastPassCalculated = true;
    }
    
    HintsHighlighter.DisplayHints();
    hintsVisible = true;
  } else if (hintsVisible && toggle) {
    lastPassCalculated = false;
    hintsVisible = false;
    HintsHighlighter.HideHints();
  }
}

void repeatedly_execute_always() {
  if (hintsVisible) {
    if (IsInBlockingScript() || GUIStack.ShowingGUI || (!Cursor.Locked && player.Moving) || IsGamePaused() || !IsInterfaceEnabled()) {
      hintsVisible = false;
      HintsHighlighter.HideHints();
    } else if (player.IsEnabled() && player.Moving && Room.Width > Game.Camera.Width) {
      HintsHighlighter.CalculateHintsForRoom();
    }
  }
}

void on_event(EventType type, int data) {
  switch (type) {
    case eEventEnterRoomBeforeFadein:
      _sprite = DynamicSprite.Create(Room.Width, Room.Height,  true);
      _overlay = Overlay.CreateRoomGraphical(0, 0, _sprite.Graphic);
      _overlay.Transparency = 100;
      break;
      
    case eEventLeaveRoomAfterFadeout:
      if (_overlay != null && _overlay.Valid) {
        _overlay.Remove();
        _overlay = null;
      }
      if (_sprite != null) {
        _sprite.Delete();
        _sprite = null;
      }
      break;
  }
}


