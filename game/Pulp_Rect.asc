// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024-2025 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

static Rect* Rect::Create(int left, int top, int right, int bottom) {
  Rect* r = new Rect;
  
  r.left = left;
  r.top = top;
  r.right = right;
  r.bottom = bottom;
  
  return r;
}

static Rect* Rect::FromPoints(Point* p0, Point* p1) {
  if (p0 == null) p0 = new Point;
  if (p1 == null) p1 = Point.Create(p0.x, p1.x);
  
  return Rect.Create(p0.x, p0.y, p1.x, p1.y);
}

Rect* Rect::Copy() {
  return Rect.Create(this.left, this.top, this.right, this.bottom);
}

int Rect::get_Width() {
  return this.right - this.left;
}

int Rect::get_Height() {
  return this.bottom - this.top;
}

String Rect::ToString() {
  return String.Format("Rect [%d, %d -> %d, %d] (width: %d, height: %d)", this.top, this.left, this.right, this.bottom, this.get_Width(), this.get_Height());
}

Rect* Rect::ToScreenRect() {
  Point* p0 = Screen.RoomToScreenPoint(this.left, this.top);
  Point* p1 = Screen.RoomToScreenPoint(this.right, this.bottom);
  
  return Rect.FromPoints(p0, p1);
}

Rect* Rect::ToRoomRect() {
  Point* p0 = Screen.ScreenToRoomPoint(this.left, this.top);
  Point* p1 = Screen.ScreenToRoomPoint(this.right, this.bottom);
  
  return Rect.FromPoints(p0, p1);
}
  