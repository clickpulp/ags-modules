// TERMS OF USE - CLICKPULP AGS MODULES (clickpulp-ags-modules)
//
// MIT License
//
// Copyright (c) 2024 Clickpulp, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#region Definitions

#define STACK_SIZE 8
#define GUI_ZORDER 1000

struct _GUIStackItem {
  int guiID;
  int guiControlFocusID;
  bool withOverlay;
  Point* lastMousePos;
  
  import void OpenGUI();
  import void CloseGUI();
  import void Clear();
};

#endregion

#region Variables

_GUIStackItem _guiStack[STACK_SIZE];
GUI* _gOverlay;
int _stackIndex = -1;

#endregion

#region Private

void _show_overlay() {
  if (_gOverlay == null || _gOverlay.Visible) return;
  
  _gOverlay.ZOrder = GUI_ZORDER - 1;
  _gOverlay.Visible = true;
}

void _hide_overlay() {
  if (_gOverlay == null || !_gOverlay.Visible) return;
  
  _gOverlay.Visible = false;
}

#endregion // Private


#region _GUIStackItem

void _GUIStackItem::Clear() {
  this.guiID = -1;
  this.withOverlay = false;
  this.guiControlFocusID = -1;
  this.lastMousePos = null;
}

void _GUIStackItem::OpenGUI() {
  GUI* g = gui[this.guiID];    
  if (this.withOverlay) _show_overlay();
  
  g.ZOrder = GUI_ZORDER;
  g.Visible = true;
  mouse.UseModeGraphic(eModePointer);
  
#ifdef TwoClickHandler  
  TwoClickHandler.Close();
#endif
  
  if (this.guiControlFocusID > 0) {
    Mouse.PlaceOnControl(g.Controls[this.guiControlFocusID]);
  }
}

void _GUIStackItem::CloseGUI() {
  GUI* g = gui[this.guiID];
  g.Visible = false;
  
  if (_stackIndex > 0) {
    if (!_guiStack[_stackIndex - 1].withOverlay) _hide_overlay();
    if (!_guiStack[_stackIndex - 1].guiControlFocusID && this.lastMousePos != null) {
      Mouse.SetPosition(this.lastMousePos.x, this.lastMousePos.y);
    }
  }
  else if (_stackIndex == 0) {
    mouse.UseDefaultGraphic();
  }
}

#endregion

#region _GUIStackItem

static void GUIStack::Init(GUI* overlayGUI) {
  _gOverlay = overlayGUI;
}

int get_GUICount(static GUIStack) {
  return _stackIndex + 1;
}

static void GUIStack::PushGUI(GUI* g, bool withOverlay, GUIControl* controlToFocus) { 
  if (g == null) {
    System.Log(eLogWarn, "[GUIStack] Tried to push null GUI");
    return;
  }
  
  if (_stackIndex >= 0) {
    _guiStack[_stackIndex].CloseGUI();
  }
  
  _stackIndex++;
  _guiStack[_stackIndex].guiID = g.ID;
  _guiStack[_stackIndex].withOverlay = withOverlay;
  _guiStack[_stackIndex].lastMousePos = mouse.GetPosition();
  if (controlToFocus != null) {
    _guiStack[_stackIndex].guiControlFocusID = controlToFocus.ID;
  }
  
  _guiStack[_stackIndex].OpenGUI();
}

static void GUIStack::PopGUI() {
  if (_stackIndex < 0) {
    System.Log(eLogWarn, "[GUIStack] Tried to pop GUI when the stack is empty");
    return;
  }
  
  _guiStack[_stackIndex].CloseGUI();
  _guiStack[_stackIndex].Clear();
  _stackIndex--;
  
  if (_stackIndex >= 0) {
    _guiStack[_stackIndex].OpenGUI();
  }
}

static void GUIStack::PopAllGUIs() {
  if (_stackIndex < 0) {
    System.Log(eLogWarn, "[GUIStack] Tried to pop all GUIs when the stack is empty");
    return;
  }
  
  _guiStack[_stackIndex].CloseGUI();
  _guiStack[_stackIndex].Clear();
  _stackIndex = -1;
}

#endregion
